{"ast":null,"code":"/**\r\n * Serviço de autenticação para o sistema GEDIE\r\n */\n\nimport { API_ENDPOINTS, SUCCESS_MESSAGES } from '../utils/constants';\nimport storage from '../utils/storage';\nimport httpClient from './httpClient';\nimport { toast } from 'react-hot-toast';\n\n/**\r\n * Realiza login do usuário\r\n */\nexport const login = async (credentials, rememberMe = false) => {\n  try {\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.LOGIN, {\n      email: credentials.email.trim().toLowerCase(),\n      password: credentials.password,\n      rememberMe\n    });\n    const {\n      user,\n      accessToken,\n      refreshToken,\n      message\n    } = response;\n\n    // Armazena tokens e dados do usuário\n    storage.auth.setTokens(accessToken, refreshToken, rememberMe);\n    storage.user.setData(user);\n\n    // Dispara evento de login bem-sucedido\n    window.dispatchEvent(new CustomEvent('auth:login', {\n      detail: {\n        user,\n        accessToken\n      }\n    }));\n    toast.success(message || SUCCESS_MESSAGES.LOGIN_SUCCESS);\n    return {\n      user,\n      accessToken,\n      refreshToken\n    };\n  } catch (error) {\n    console.error('Erro no login:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Realiza cadastro de novo usuário\r\n */\nexport const register = async userData => {\n  try {\n    var _userData$phone;\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.REGISTER, {\n      name: userData.name.trim(),\n      email: userData.email.trim().toLowerCase(),\n      password: userData.password,\n      phone: ((_userData$phone = userData.phone) === null || _userData$phone === void 0 ? void 0 : _userData$phone.replace(/\\D/g, '')) || null,\n      acceptTerms: userData.acceptTerms\n    });\n    const {\n      user,\n      accessToken,\n      refreshToken,\n      message\n    } = response;\n\n    // Armazena tokens e dados do usuário\n    storage.auth.setTokens(accessToken, refreshToken, false);\n    storage.user.setData(user);\n\n    // Dispara evento de cadastro bem-sucedido\n    window.dispatchEvent(new CustomEvent('auth:register', {\n      detail: {\n        user,\n        accessToken\n      }\n    }));\n    toast.success(message || SUCCESS_MESSAGES.REGISTER_SUCCESS);\n    return {\n      user,\n      accessToken,\n      refreshToken\n    };\n  } catch (error) {\n    console.error('Erro no cadastro:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Realiza logout do usuário\r\n */\nexport const logout = async (silent = false) => {\n  try {\n    // Tenta fazer logout no servidor (opcional)\n    const refreshToken = storage.auth.getRefreshToken();\n    if (refreshToken) {\n      await httpClient.silentPost(API_ENDPOINTS.AUTH.LOGOUT, {\n        refreshToken\n      });\n    }\n  } catch (error) {\n    console.warn('Erro ao fazer logout no servidor:', error);\n  } finally {\n    // Limpa dados locais independentemente do resultado\n    storage.auth.clearTokens();\n    storage.user.clearData();\n    storage.telegram.clearSyncData();\n\n    // Dispara evento de logout\n    window.dispatchEvent(new CustomEvent('auth:logout'));\n    if (!silent) {\n      toast.success(SUCCESS_MESSAGES.LOGOUT_SUCCESS);\n    }\n  }\n};\n\n/**\r\n * Renova token de acesso\r\n */\nexport const refreshToken = async () => {\n  try {\n    const refreshToken = storage.auth.getRefreshToken();\n    if (!refreshToken) {\n      throw new Error('Token de refresh não encontrado');\n    }\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.REFRESH, {\n      refreshToken\n    });\n    const {\n      accessToken,\n      refreshToken: newRefreshToken\n    } = response;\n\n    // Atualiza tokens no storage\n    storage.auth.setTokens(accessToken, newRefreshToken, storage.auth.getRememberMe());\n    return {\n      accessToken,\n      refreshToken: newRefreshToken\n    };\n  } catch (error) {\n    console.error('Erro ao renovar token:', error);\n\n    // Se falhar, limpa autenticação\n    await logout(true);\n    throw error;\n  }\n};\n\n/**\r\n * Verifica se o usuário está autenticado\r\n */\nexport const isAuthenticated = () => {\n  return storage.auth.isAuthenticated();\n};\n\n/**\r\n * Obtém dados do usuário atual\r\n */\nexport const getCurrentUser = () => {\n  return storage.user.getData();\n};\n\n/**\r\n * Obtém token de acesso atual\r\n */\nexport const getAccessToken = () => {\n  return storage.auth.getAccessToken();\n};\n\n/**\r\n * Verifica e valida token atual\r\n */\nexport const validateToken = async () => {\n  try {\n    if (!isAuthenticated()) {\n      return false;\n    }\n\n    // Faz uma requisição simples para validar o token\n    const response = await httpClient.silentGet(API_ENDPOINTS.AUTH.PROFILE);\n\n    // Atualiza dados do usuário se necessário\n    if (response.user) {\n      storage.user.setData(response.user);\n    }\n    return true;\n  } catch (error) {\n    console.warn('Token inválido:', error);\n\n    // Tenta renovar o token\n    try {\n      await refreshToken();\n      return true;\n    } catch (refreshError) {\n      console.error('Erro ao renovar token:', refreshError);\n      await logout(true);\n      return false;\n    }\n  }\n};\n\n/**\r\n * Solicita recuperação de senha\r\n */\nexport const forgotPassword = async email => {\n  try {\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.FORGOT_PASSWORD, {\n      email: email.trim().toLowerCase()\n    });\n    toast.success(response.message || 'Email de recuperação enviado com sucesso!');\n    return response;\n  } catch (error) {\n    console.error('Erro ao solicitar recuperação de senha:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Redefine senha com token\r\n */\nexport const resetPassword = async (token, newPassword) => {\n  try {\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.RESET_PASSWORD, {\n      token,\n      password: newPassword\n    });\n    toast.success(response.message || 'Senha redefinida com sucesso!');\n    return response;\n  } catch (error) {\n    console.error('Erro ao redefinir senha:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Verifica email com token\r\n */\nexport const verifyEmail = async token => {\n  try {\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.VERIFY_EMAIL, {\n      token\n    });\n\n    // Atualiza dados do usuário\n    if (response.user) {\n      storage.user.setData(response.user);\n    }\n    toast.success(response.message || SUCCESS_MESSAGES.EMAIL_VERIFIED);\n    return response;\n  } catch (error) {\n    console.error('Erro ao verificar email:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Atualiza perfil do usuário\r\n */\nexport const updateProfile = async profileData => {\n  try {\n    var _profileData$name, _profileData$email, _profileData$phone;\n    const response = await httpClient.put(API_ENDPOINTS.AUTH.PROFILE, {\n      name: (_profileData$name = profileData.name) === null || _profileData$name === void 0 ? void 0 : _profileData$name.trim(),\n      email: (_profileData$email = profileData.email) === null || _profileData$email === void 0 ? void 0 : _profileData$email.trim().toLowerCase(),\n      phone: ((_profileData$phone = profileData.phone) === null || _profileData$phone === void 0 ? void 0 : _profileData$phone.replace(/\\D/g, '')) || null,\n      timezone: profileData.timezone,\n      language: profileData.language\n    });\n\n    // Atualiza dados do usuário no storage\n    if (response.user) {\n      storage.user.setData(response.user);\n    }\n    toast.success(response.message || SUCCESS_MESSAGES.PROFILE_UPDATED);\n    return response;\n  } catch (error) {\n    console.error('Erro ao atualizar perfil:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Altera senha do usuário\r\n */\nexport const changePassword = async (currentPassword, newPassword) => {\n  try {\n    const response = await httpClient.post('/auth/change-password', {\n      currentPassword,\n      newPassword\n    });\n    toast.success(response.message || SUCCESS_MESSAGES.PASSWORD_CHANGED);\n    return response;\n  } catch (error) {\n    console.error('Erro ao alterar senha:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Sincroniza conta com Telegram\r\n */\nexport const syncWithTelegram = async telegramCode => {\n  try {\n    const response = await httpClient.post(API_ENDPOINTS.USERS.SYNC_TELEGRAM, {\n      code: telegramCode.trim()\n    });\n\n    // Atualiza dados de sincronização\n    if (response.syncData) {\n      storage.telegram.setSyncData(response.syncData);\n    }\n\n    // Atualiza dados do usuário\n    if (response.user) {\n      storage.user.setData(response.user);\n    }\n    toast.success(response.message || SUCCESS_MESSAGES.SYNC_SUCCESS);\n    return response;\n  } catch (error) {\n    console.error('Erro ao sincronizar com Telegram:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Remove sincronização com Telegram\r\n */\nexport const unsyncTelegram = async () => {\n  try {\n    const response = await httpClient.delete(API_ENDPOINTS.USERS.SYNC_TELEGRAM);\n\n    // Remove dados de sincronização\n    storage.telegram.clearSyncData();\n\n    // Atualiza dados do usuário\n    if (response.user) {\n      storage.user.setData(response.user);\n    }\n    toast.success(response.message || 'Sincronização removida com sucesso!');\n    return response;\n  } catch (error) {\n    console.error('Erro ao remover sincronização:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Verifica status de sincronização com Telegram\r\n */\nexport const getTelegramSyncStatus = () => {\n  const syncData = storage.telegram.getSyncData();\n  const user = getCurrentUser();\n  return {\n    isLinked: (syncData === null || syncData === void 0 ? void 0 : syncData.isLinked) || false,\n    telegramId: (syncData === null || syncData === void 0 ? void 0 : syncData.telegramId) || (user === null || user === void 0 ? void 0 : user.telegramId) || null,\n    linkedAt: (syncData === null || syncData === void 0 ? void 0 : syncData.linkedAt) || null,\n    lastSync: (syncData === null || syncData === void 0 ? void 0 : syncData.lastSync) || null\n  };\n};\n\n/**\r\n * Gera código de sincronização com Telegram\r\n */\nexport const generateTelegramSyncCode = async () => {\n  try {\n    const response = await httpClient.post('/auth/generate-telegram-code');\n    return {\n      code: response.code,\n      expiresAt: response.expiresAt,\n      instructions: response.instructions\n    };\n  } catch (error) {\n    console.error('Erro ao gerar código de sincronização:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Exclui conta do usuário\r\n */\nexport const deleteAccount = async password => {\n  try {\n    const response = await httpClient.delete(API_ENDPOINTS.USERS.DELETE, {\n      data: {\n        password\n      }\n    });\n\n    // Limpa todos os dados locais\n    storage.clearAllAppData();\n\n    // Dispara evento de exclusão de conta\n    window.dispatchEvent(new CustomEvent('auth:account-deleted'));\n    toast.success(response.message || 'Conta excluída com sucesso!');\n    return response;\n  } catch (error) {\n    console.error('Erro ao excluir conta:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Inicializa o serviço de autenticação\r\n */\nexport const initialize = async () => {\n  try {\n    // Migra dados se necessário\n    storage.migrateData();\n\n    // Se está autenticado, valida o token\n    if (isAuthenticated()) {\n      const isValid = await validateToken();\n      if (isValid) {\n        // Dispara evento de inicialização bem-sucedida\n        const user = getCurrentUser();\n        window.dispatchEvent(new CustomEvent('auth:initialized', {\n          detail: {\n            user,\n            isAuthenticated: true\n          }\n        }));\n      }\n    } else {\n      // Dispara evento de não autenticado\n      window.dispatchEvent(new CustomEvent('auth:initialized', {\n        detail: {\n          user: null,\n          isAuthenticated: false\n        }\n      }));\n    }\n  } catch (error) {\n    console.error('Erro ao inicializar autenticação:', error);\n\n    // Em caso de erro, assume não autenticado\n    window.dispatchEvent(new CustomEvent('auth:initialized', {\n      detail: {\n        user: null,\n        isAuthenticated: false\n      }\n    }));\n  }\n};\nexport default {\n  login,\n  register,\n  logout,\n  refreshToken,\n  isAuthenticated,\n  getCurrentUser,\n  getAccessToken,\n  validateToken,\n  forgotPassword,\n  resetPassword,\n  verifyEmail,\n  updateProfile,\n  changePassword,\n  syncWithTelegram,\n  unsyncTelegram,\n  getTelegramSyncStatus,\n  generateTelegramSyncCode,\n  deleteAccount,\n  initialize\n};","map":{"version":3,"names":["API_ENDPOINTS","SUCCESS_MESSAGES","storage","httpClient","toast","login","credentials","rememberMe","response","post","AUTH","LOGIN","email","trim","toLowerCase","password","user","accessToken","refreshToken","message","auth","setTokens","setData","window","dispatchEvent","CustomEvent","detail","success","LOGIN_SUCCESS","error","console","register","userData","_userData$phone","REGISTER","name","phone","replace","acceptTerms","REGISTER_SUCCESS","logout","silent","getRefreshToken","silentPost","LOGOUT","warn","clearTokens","clearData","telegram","clearSyncData","LOGOUT_SUCCESS","Error","REFRESH","newRefreshToken","getRememberMe","isAuthenticated","getCurrentUser","getData","getAccessToken","validateToken","silentGet","PROFILE","refreshError","forgotPassword","FORGOT_PASSWORD","resetPassword","token","newPassword","RESET_PASSWORD","verifyEmail","VERIFY_EMAIL","EMAIL_VERIFIED","updateProfile","profileData","_profileData$name","_profileData$email","_profileData$phone","put","timezone","language","PROFILE_UPDATED","changePassword","currentPassword","PASSWORD_CHANGED","syncWithTelegram","telegramCode","USERS","SYNC_TELEGRAM","code","syncData","setSyncData","SYNC_SUCCESS","unsyncTelegram","delete","getTelegramSyncStatus","getSyncData","isLinked","telegramId","linkedAt","lastSync","generateTelegramSyncCode","expiresAt","instructions","deleteAccount","DELETE","data","clearAllAppData","initialize","migrateData","isValid"],"sources":["C:/Users/xvito/OneDrive/Área de Trabalho/TRABALHO/GEDIE-MVC/frontend/src/services/authService.js"],"sourcesContent":["/**\r\n * Serviço de autenticação para o sistema GEDIE\r\n */\r\n\r\nimport { API_ENDPOINTS, SUCCESS_MESSAGES } from '../utils/constants';\r\nimport storage from '../utils/storage';\r\nimport httpClient from './httpClient';\r\nimport { toast } from 'react-hot-toast';\r\n\r\n/**\r\n * Realiza login do usuário\r\n */\r\nexport const login = async (credentials, rememberMe = false) => {\r\n  try {\r\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.LOGIN, {\r\n      email: credentials.email.trim().toLowerCase(),\r\n      password: credentials.password,\r\n      rememberMe\r\n    });\r\n\r\n    const { user, accessToken, refreshToken, message } = response;\r\n\r\n    // Armazena tokens e dados do usuário\r\n    storage.auth.setTokens(accessToken, refreshToken, rememberMe);\r\n    storage.user.setData(user);\r\n\r\n    // Dispara evento de login bem-sucedido\r\n    window.dispatchEvent(new CustomEvent('auth:login', { \r\n      detail: { user, accessToken } \r\n    }));\r\n\r\n    toast.success(message || SUCCESS_MESSAGES.LOGIN_SUCCESS);\r\n\r\n    return { user, accessToken, refreshToken };\r\n  } catch (error) {\r\n    console.error('Erro no login:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Realiza cadastro de novo usuário\r\n */\r\nexport const register = async (userData) => {\r\n  try {\r\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.REGISTER, {\r\n      name: userData.name.trim(),\r\n      email: userData.email.trim().toLowerCase(),\r\n      password: userData.password,\r\n      phone: userData.phone?.replace(/\\D/g, '') || null,\r\n      acceptTerms: userData.acceptTerms\r\n    });\r\n\r\n    const { user, accessToken, refreshToken, message } = response;\r\n\r\n    // Armazena tokens e dados do usuário\r\n    storage.auth.setTokens(accessToken, refreshToken, false);\r\n    storage.user.setData(user);\r\n\r\n    // Dispara evento de cadastro bem-sucedido\r\n    window.dispatchEvent(new CustomEvent('auth:register', { \r\n      detail: { user, accessToken } \r\n    }));\r\n\r\n    toast.success(message || SUCCESS_MESSAGES.REGISTER_SUCCESS);\r\n\r\n    return { user, accessToken, refreshToken };\r\n  } catch (error) {\r\n    console.error('Erro no cadastro:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Realiza logout do usuário\r\n */\r\nexport const logout = async (silent = false) => {\r\n  try {\r\n    // Tenta fazer logout no servidor (opcional)\r\n    const refreshToken = storage.auth.getRefreshToken();\r\n    if (refreshToken) {\r\n      await httpClient.silentPost(API_ENDPOINTS.AUTH.LOGOUT, { refreshToken });\r\n    }\r\n  } catch (error) {\r\n    console.warn('Erro ao fazer logout no servidor:', error);\r\n  } finally {\r\n    // Limpa dados locais independentemente do resultado\r\n    storage.auth.clearTokens();\r\n    storage.user.clearData();\r\n    storage.telegram.clearSyncData();\r\n\r\n    // Dispara evento de logout\r\n    window.dispatchEvent(new CustomEvent('auth:logout'));\r\n\r\n    if (!silent) {\r\n      toast.success(SUCCESS_MESSAGES.LOGOUT_SUCCESS);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Renova token de acesso\r\n */\r\nexport const refreshToken = async () => {\r\n  try {\r\n    const refreshToken = storage.auth.getRefreshToken();\r\n    \r\n    if (!refreshToken) {\r\n      throw new Error('Token de refresh não encontrado');\r\n    }\r\n\r\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.REFRESH, {\r\n      refreshToken\r\n    });\r\n\r\n    const { accessToken, refreshToken: newRefreshToken } = response;\r\n\r\n    // Atualiza tokens no storage\r\n    storage.auth.setTokens(accessToken, newRefreshToken, storage.auth.getRememberMe());\r\n\r\n    return { accessToken, refreshToken: newRefreshToken };\r\n  } catch (error) {\r\n    console.error('Erro ao renovar token:', error);\r\n    \r\n    // Se falhar, limpa autenticação\r\n    await logout(true);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Verifica se o usuário está autenticado\r\n */\r\nexport const isAuthenticated = () => {\r\n  return storage.auth.isAuthenticated();\r\n};\r\n\r\n/**\r\n * Obtém dados do usuário atual\r\n */\r\nexport const getCurrentUser = () => {\r\n  return storage.user.getData();\r\n};\r\n\r\n/**\r\n * Obtém token de acesso atual\r\n */\r\nexport const getAccessToken = () => {\r\n  return storage.auth.getAccessToken();\r\n};\r\n\r\n/**\r\n * Verifica e valida token atual\r\n */\r\nexport const validateToken = async () => {\r\n  try {\r\n    if (!isAuthenticated()) {\r\n      return false;\r\n    }\r\n\r\n    // Faz uma requisição simples para validar o token\r\n    const response = await httpClient.silentGet(API_ENDPOINTS.AUTH.PROFILE);\r\n    \r\n    // Atualiza dados do usuário se necessário\r\n    if (response.user) {\r\n      storage.user.setData(response.user);\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.warn('Token inválido:', error);\r\n    \r\n    // Tenta renovar o token\r\n    try {\r\n      await refreshToken();\r\n      return true;\r\n    } catch (refreshError) {\r\n      console.error('Erro ao renovar token:', refreshError);\r\n      await logout(true);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Solicita recuperação de senha\r\n */\r\nexport const forgotPassword = async (email) => {\r\n  try {\r\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.FORGOT_PASSWORD, {\r\n      email: email.trim().toLowerCase()\r\n    });\r\n\r\n    toast.success(response.message || 'Email de recuperação enviado com sucesso!');\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('Erro ao solicitar recuperação de senha:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Redefine senha com token\r\n */\r\nexport const resetPassword = async (token, newPassword) => {\r\n  try {\r\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.RESET_PASSWORD, {\r\n      token,\r\n      password: newPassword\r\n    });\r\n\r\n    toast.success(response.message || 'Senha redefinida com sucesso!');\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('Erro ao redefinir senha:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Verifica email com token\r\n */\r\nexport const verifyEmail = async (token) => {\r\n  try {\r\n    const response = await httpClient.post(API_ENDPOINTS.AUTH.VERIFY_EMAIL, {\r\n      token\r\n    });\r\n\r\n    // Atualiza dados do usuário\r\n    if (response.user) {\r\n      storage.user.setData(response.user);\r\n    }\r\n\r\n    toast.success(response.message || SUCCESS_MESSAGES.EMAIL_VERIFIED);\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('Erro ao verificar email:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Atualiza perfil do usuário\r\n */\r\nexport const updateProfile = async (profileData) => {\r\n  try {\r\n    const response = await httpClient.put(API_ENDPOINTS.AUTH.PROFILE, {\r\n      name: profileData.name?.trim(),\r\n      email: profileData.email?.trim().toLowerCase(),\r\n      phone: profileData.phone?.replace(/\\D/g, '') || null,\r\n      timezone: profileData.timezone,\r\n      language: profileData.language\r\n    });\r\n\r\n    // Atualiza dados do usuário no storage\r\n    if (response.user) {\r\n      storage.user.setData(response.user);\r\n    }\r\n\r\n    toast.success(response.message || SUCCESS_MESSAGES.PROFILE_UPDATED);\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('Erro ao atualizar perfil:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Altera senha do usuário\r\n */\r\nexport const changePassword = async (currentPassword, newPassword) => {\r\n  try {\r\n    const response = await httpClient.post('/auth/change-password', {\r\n      currentPassword,\r\n      newPassword\r\n    });\r\n\r\n    toast.success(response.message || SUCCESS_MESSAGES.PASSWORD_CHANGED);\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('Erro ao alterar senha:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Sincroniza conta com Telegram\r\n */\r\nexport const syncWithTelegram = async (telegramCode) => {\r\n  try {\r\n    const response = await httpClient.post(API_ENDPOINTS.USERS.SYNC_TELEGRAM, {\r\n      code: telegramCode.trim()\r\n    });\r\n\r\n    // Atualiza dados de sincronização\r\n    if (response.syncData) {\r\n      storage.telegram.setSyncData(response.syncData);\r\n    }\r\n\r\n    // Atualiza dados do usuário\r\n    if (response.user) {\r\n      storage.user.setData(response.user);\r\n    }\r\n\r\n    toast.success(response.message || SUCCESS_MESSAGES.SYNC_SUCCESS);\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('Erro ao sincronizar com Telegram:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Remove sincronização com Telegram\r\n */\r\nexport const unsyncTelegram = async () => {\r\n  try {\r\n    const response = await httpClient.delete(API_ENDPOINTS.USERS.SYNC_TELEGRAM);\r\n\r\n    // Remove dados de sincronização\r\n    storage.telegram.clearSyncData();\r\n\r\n    // Atualiza dados do usuário\r\n    if (response.user) {\r\n      storage.user.setData(response.user);\r\n    }\r\n\r\n    toast.success(response.message || 'Sincronização removida com sucesso!');\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('Erro ao remover sincronização:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Verifica status de sincronização com Telegram\r\n */\r\nexport const getTelegramSyncStatus = () => {\r\n  const syncData = storage.telegram.getSyncData();\r\n  const user = getCurrentUser();\r\n  \r\n  return {\r\n    isLinked: syncData?.isLinked || false,\r\n    telegramId: syncData?.telegramId || user?.telegramId || null,\r\n    linkedAt: syncData?.linkedAt || null,\r\n    lastSync: syncData?.lastSync || null\r\n  };\r\n};\r\n\r\n/**\r\n * Gera código de sincronização com Telegram\r\n */\r\nexport const generateTelegramSyncCode = async () => {\r\n  try {\r\n    const response = await httpClient.post('/auth/generate-telegram-code');\r\n    \r\n    return {\r\n      code: response.code,\r\n      expiresAt: response.expiresAt,\r\n      instructions: response.instructions\r\n    };\r\n  } catch (error) {\r\n    console.error('Erro ao gerar código de sincronização:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Exclui conta do usuário\r\n */\r\nexport const deleteAccount = async (password) => {\r\n  try {\r\n    const response = await httpClient.delete(API_ENDPOINTS.USERS.DELETE, {\r\n      data: { password }\r\n    });\r\n\r\n    // Limpa todos os dados locais\r\n    storage.clearAllAppData();\r\n\r\n    // Dispara evento de exclusão de conta\r\n    window.dispatchEvent(new CustomEvent('auth:account-deleted'));\r\n\r\n    toast.success(response.message || 'Conta excluída com sucesso!');\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('Erro ao excluir conta:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Inicializa o serviço de autenticação\r\n */\r\nexport const initialize = async () => {\r\n  try {\r\n    // Migra dados se necessário\r\n    storage.migrateData();\r\n\r\n    // Se está autenticado, valida o token\r\n    if (isAuthenticated()) {\r\n      const isValid = await validateToken();\r\n      \r\n      if (isValid) {\r\n        // Dispara evento de inicialização bem-sucedida\r\n        const user = getCurrentUser();\r\n        window.dispatchEvent(new CustomEvent('auth:initialized', { \r\n          detail: { user, isAuthenticated: true } \r\n        }));\r\n      }\r\n    } else {\r\n      // Dispara evento de não autenticado\r\n      window.dispatchEvent(new CustomEvent('auth:initialized', { \r\n        detail: { user: null, isAuthenticated: false } \r\n      }));\r\n    }\r\n  } catch (error) {\r\n    console.error('Erro ao inicializar autenticação:', error);\r\n    \r\n    // Em caso de erro, assume não autenticado\r\n    window.dispatchEvent(new CustomEvent('auth:initialized', { \r\n      detail: { user: null, isAuthenticated: false } \r\n    }));\r\n  }\r\n};\r\n\r\nexport default {\r\n  login,\r\n  register,\r\n  logout,\r\n  refreshToken,\r\n  isAuthenticated,\r\n  getCurrentUser,\r\n  getAccessToken,\r\n  validateToken,\r\n  forgotPassword,\r\n  resetPassword,\r\n  verifyEmail,\r\n  updateProfile,\r\n  changePassword,\r\n  syncWithTelegram,\r\n  unsyncTelegram,\r\n  getTelegramSyncStatus,\r\n  generateTelegramSyncCode,\r\n  deleteAccount,\r\n  initialize\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAASA,aAAa,EAAEC,gBAAgB,QAAQ,oBAAoB;AACpE,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,KAAK,QAAQ,iBAAiB;;AAEvC;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,WAAW,EAAEC,UAAU,GAAG,KAAK,KAAK;EAC9D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAACT,aAAa,CAACU,IAAI,CAACC,KAAK,EAAE;MAC/DC,KAAK,EAAEN,WAAW,CAACM,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC7CC,QAAQ,EAAET,WAAW,CAACS,QAAQ;MAC9BR;IACF,CAAC,CAAC;IAEF,MAAM;MAAES,IAAI;MAAEC,WAAW;MAAEC,YAAY;MAAEC;IAAQ,CAAC,GAAGX,QAAQ;;IAE7D;IACAN,OAAO,CAACkB,IAAI,CAACC,SAAS,CAACJ,WAAW,EAAEC,YAAY,EAAEX,UAAU,CAAC;IAC7DL,OAAO,CAACc,IAAI,CAACM,OAAO,CAACN,IAAI,CAAC;;IAE1B;IACAO,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,YAAY,EAAE;MACjDC,MAAM,EAAE;QAAEV,IAAI;QAAEC;MAAY;IAC9B,CAAC,CAAC,CAAC;IAEHb,KAAK,CAACuB,OAAO,CAACR,OAAO,IAAIlB,gBAAgB,CAAC2B,aAAa,CAAC;IAExD,OAAO;MAAEZ,IAAI;MAAEC,WAAW;MAAEC;IAAa,CAAC;EAC5C,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAI;IAAA,IAAAC,eAAA;IACF,MAAMzB,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAACT,aAAa,CAACU,IAAI,CAACwB,QAAQ,EAAE;MAClEC,IAAI,EAAEH,QAAQ,CAACG,IAAI,CAACtB,IAAI,CAAC,CAAC;MAC1BD,KAAK,EAAEoB,QAAQ,CAACpB,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC1CC,QAAQ,EAAEiB,QAAQ,CAACjB,QAAQ;MAC3BqB,KAAK,EAAE,EAAAH,eAAA,GAAAD,QAAQ,CAACI,KAAK,cAAAH,eAAA,uBAAdA,eAAA,CAAgBI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,KAAI,IAAI;MACjDC,WAAW,EAAEN,QAAQ,CAACM;IACxB,CAAC,CAAC;IAEF,MAAM;MAAEtB,IAAI;MAAEC,WAAW;MAAEC,YAAY;MAAEC;IAAQ,CAAC,GAAGX,QAAQ;;IAE7D;IACAN,OAAO,CAACkB,IAAI,CAACC,SAAS,CAACJ,WAAW,EAAEC,YAAY,EAAE,KAAK,CAAC;IACxDhB,OAAO,CAACc,IAAI,CAACM,OAAO,CAACN,IAAI,CAAC;;IAE1B;IACAO,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,eAAe,EAAE;MACpDC,MAAM,EAAE;QAAEV,IAAI;QAAEC;MAAY;IAC9B,CAAC,CAAC,CAAC;IAEHb,KAAK,CAACuB,OAAO,CAACR,OAAO,IAAIlB,gBAAgB,CAACsC,gBAAgB,CAAC;IAE3D,OAAO;MAAEvB,IAAI;MAAEC,WAAW;MAAEC;IAAa,CAAC;EAC5C,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMW,MAAM,GAAG,MAAAA,CAAOC,MAAM,GAAG,KAAK,KAAK;EAC9C,IAAI;IACF;IACA,MAAMvB,YAAY,GAAGhB,OAAO,CAACkB,IAAI,CAACsB,eAAe,CAAC,CAAC;IACnD,IAAIxB,YAAY,EAAE;MAChB,MAAMf,UAAU,CAACwC,UAAU,CAAC3C,aAAa,CAACU,IAAI,CAACkC,MAAM,EAAE;QAAE1B;MAAa,CAAC,CAAC;IAC1E;EACF,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACe,IAAI,CAAC,mCAAmC,EAAEhB,KAAK,CAAC;EAC1D,CAAC,SAAS;IACR;IACA3B,OAAO,CAACkB,IAAI,CAAC0B,WAAW,CAAC,CAAC;IAC1B5C,OAAO,CAACc,IAAI,CAAC+B,SAAS,CAAC,CAAC;IACxB7C,OAAO,CAAC8C,QAAQ,CAACC,aAAa,CAAC,CAAC;;IAEhC;IACA1B,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,aAAa,CAAC,CAAC;IAEpD,IAAI,CAACgB,MAAM,EAAE;MACXrC,KAAK,CAACuB,OAAO,CAAC1B,gBAAgB,CAACiD,cAAc,CAAC;IAChD;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMhC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMA,YAAY,GAAGhB,OAAO,CAACkB,IAAI,CAACsB,eAAe,CAAC,CAAC;IAEnD,IAAI,CAACxB,YAAY,EAAE;MACjB,MAAM,IAAIiC,KAAK,CAAC,iCAAiC,CAAC;IACpD;IAEA,MAAM3C,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAACT,aAAa,CAACU,IAAI,CAAC0C,OAAO,EAAE;MACjElC;IACF,CAAC,CAAC;IAEF,MAAM;MAAED,WAAW;MAAEC,YAAY,EAAEmC;IAAgB,CAAC,GAAG7C,QAAQ;;IAE/D;IACAN,OAAO,CAACkB,IAAI,CAACC,SAAS,CAACJ,WAAW,EAAEoC,eAAe,EAAEnD,OAAO,CAACkB,IAAI,CAACkC,aAAa,CAAC,CAAC,CAAC;IAElF,OAAO;MAAErC,WAAW;MAAEC,YAAY,EAAEmC;IAAgB,CAAC;EACvD,CAAC,CAAC,OAAOxB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;;IAE9C;IACA,MAAMW,MAAM,CAAC,IAAI,CAAC;IAClB,MAAMX,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAM0B,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOrD,OAAO,CAACkB,IAAI,CAACmC,eAAe,CAAC,CAAC;AACvC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAOtD,OAAO,CAACc,IAAI,CAACyC,OAAO,CAAC,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAOxD,OAAO,CAACkB,IAAI,CAACsC,cAAc,CAAC,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,IAAI,CAACJ,eAAe,CAAC,CAAC,EAAE;MACtB,OAAO,KAAK;IACd;;IAEA;IACA,MAAM/C,QAAQ,GAAG,MAAML,UAAU,CAACyD,SAAS,CAAC5D,aAAa,CAACU,IAAI,CAACmD,OAAO,CAAC;;IAEvE;IACA,IAAIrD,QAAQ,CAACQ,IAAI,EAAE;MACjBd,OAAO,CAACc,IAAI,CAACM,OAAO,CAACd,QAAQ,CAACQ,IAAI,CAAC;IACrC;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACe,IAAI,CAAC,iBAAiB,EAAEhB,KAAK,CAAC;;IAEtC;IACA,IAAI;MACF,MAAMX,YAAY,CAAC,CAAC;MACpB,OAAO,IAAI;IACb,CAAC,CAAC,OAAO4C,YAAY,EAAE;MACrBhC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEiC,YAAY,CAAC;MACrD,MAAMtB,MAAM,CAAC,IAAI,CAAC;MAClB,OAAO,KAAK;IACd;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMuB,cAAc,GAAG,MAAOnD,KAAK,IAAK;EAC7C,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAACT,aAAa,CAACU,IAAI,CAACsD,eAAe,EAAE;MACzEpD,KAAK,EAAEA,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IAClC,CAAC,CAAC;IAEFV,KAAK,CAACuB,OAAO,CAACnB,QAAQ,CAACW,OAAO,IAAI,2CAA2C,CAAC;IAE9E,OAAOX,QAAQ;EACjB,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMoC,aAAa,GAAG,MAAAA,CAAOC,KAAK,EAAEC,WAAW,KAAK;EACzD,IAAI;IACF,MAAM3D,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAACT,aAAa,CAACU,IAAI,CAAC0D,cAAc,EAAE;MACxEF,KAAK;MACLnD,QAAQ,EAAEoD;IACZ,CAAC,CAAC;IAEF/D,KAAK,CAACuB,OAAO,CAACnB,QAAQ,CAACW,OAAO,IAAI,+BAA+B,CAAC;IAElE,OAAOX,QAAQ;EACjB,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMwC,WAAW,GAAG,MAAOH,KAAK,IAAK;EAC1C,IAAI;IACF,MAAM1D,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAACT,aAAa,CAACU,IAAI,CAAC4D,YAAY,EAAE;MACtEJ;IACF,CAAC,CAAC;;IAEF;IACA,IAAI1D,QAAQ,CAACQ,IAAI,EAAE;MACjBd,OAAO,CAACc,IAAI,CAACM,OAAO,CAACd,QAAQ,CAACQ,IAAI,CAAC;IACrC;IAEAZ,KAAK,CAACuB,OAAO,CAACnB,QAAQ,CAACW,OAAO,IAAIlB,gBAAgB,CAACsE,cAAc,CAAC;IAElE,OAAO/D,QAAQ;EACjB,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAM2C,aAAa,GAAG,MAAOC,WAAW,IAAK;EAClD,IAAI;IAAA,IAAAC,iBAAA,EAAAC,kBAAA,EAAAC,kBAAA;IACF,MAAMpE,QAAQ,GAAG,MAAML,UAAU,CAAC0E,GAAG,CAAC7E,aAAa,CAACU,IAAI,CAACmD,OAAO,EAAE;MAChE1B,IAAI,GAAAuC,iBAAA,GAAED,WAAW,CAACtC,IAAI,cAAAuC,iBAAA,uBAAhBA,iBAAA,CAAkB7D,IAAI,CAAC,CAAC;MAC9BD,KAAK,GAAA+D,kBAAA,GAAEF,WAAW,CAAC7D,KAAK,cAAA+D,kBAAA,uBAAjBA,kBAAA,CAAmB9D,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC9CsB,KAAK,EAAE,EAAAwC,kBAAA,GAAAH,WAAW,CAACrC,KAAK,cAAAwC,kBAAA,uBAAjBA,kBAAA,CAAmBvC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,KAAI,IAAI;MACpDyC,QAAQ,EAAEL,WAAW,CAACK,QAAQ;MAC9BC,QAAQ,EAAEN,WAAW,CAACM;IACxB,CAAC,CAAC;;IAEF;IACA,IAAIvE,QAAQ,CAACQ,IAAI,EAAE;MACjBd,OAAO,CAACc,IAAI,CAACM,OAAO,CAACd,QAAQ,CAACQ,IAAI,CAAC;IACrC;IAEAZ,KAAK,CAACuB,OAAO,CAACnB,QAAQ,CAACW,OAAO,IAAIlB,gBAAgB,CAAC+E,eAAe,CAAC;IAEnE,OAAOxE,QAAQ;EACjB,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMoD,cAAc,GAAG,MAAAA,CAAOC,eAAe,EAAEf,WAAW,KAAK;EACpE,IAAI;IACF,MAAM3D,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAAC,uBAAuB,EAAE;MAC9DyE,eAAe;MACff;IACF,CAAC,CAAC;IAEF/D,KAAK,CAACuB,OAAO,CAACnB,QAAQ,CAACW,OAAO,IAAIlB,gBAAgB,CAACkF,gBAAgB,CAAC;IAEpE,OAAO3E,QAAQ;EACjB,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMuD,gBAAgB,GAAG,MAAOC,YAAY,IAAK;EACtD,IAAI;IACF,MAAM7E,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAACT,aAAa,CAACsF,KAAK,CAACC,aAAa,EAAE;MACxEC,IAAI,EAAEH,YAAY,CAACxE,IAAI,CAAC;IAC1B,CAAC,CAAC;;IAEF;IACA,IAAIL,QAAQ,CAACiF,QAAQ,EAAE;MACrBvF,OAAO,CAAC8C,QAAQ,CAAC0C,WAAW,CAAClF,QAAQ,CAACiF,QAAQ,CAAC;IACjD;;IAEA;IACA,IAAIjF,QAAQ,CAACQ,IAAI,EAAE;MACjBd,OAAO,CAACc,IAAI,CAACM,OAAO,CAACd,QAAQ,CAACQ,IAAI,CAAC;IACrC;IAEAZ,KAAK,CAACuB,OAAO,CAACnB,QAAQ,CAACW,OAAO,IAAIlB,gBAAgB,CAAC0F,YAAY,CAAC;IAEhE,OAAOnF,QAAQ;EACjB,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAM+D,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMpF,QAAQ,GAAG,MAAML,UAAU,CAAC0F,MAAM,CAAC7F,aAAa,CAACsF,KAAK,CAACC,aAAa,CAAC;;IAE3E;IACArF,OAAO,CAAC8C,QAAQ,CAACC,aAAa,CAAC,CAAC;;IAEhC;IACA,IAAIzC,QAAQ,CAACQ,IAAI,EAAE;MACjBd,OAAO,CAACc,IAAI,CAACM,OAAO,CAACd,QAAQ,CAACQ,IAAI,CAAC;IACrC;IAEAZ,KAAK,CAACuB,OAAO,CAACnB,QAAQ,CAACW,OAAO,IAAI,qCAAqC,CAAC;IAExE,OAAOX,QAAQ;EACjB,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMiE,qBAAqB,GAAGA,CAAA,KAAM;EACzC,MAAML,QAAQ,GAAGvF,OAAO,CAAC8C,QAAQ,CAAC+C,WAAW,CAAC,CAAC;EAC/C,MAAM/E,IAAI,GAAGwC,cAAc,CAAC,CAAC;EAE7B,OAAO;IACLwC,QAAQ,EAAE,CAAAP,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEO,QAAQ,KAAI,KAAK;IACrCC,UAAU,EAAE,CAAAR,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEQ,UAAU,MAAIjF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiF,UAAU,KAAI,IAAI;IAC5DC,QAAQ,EAAE,CAAAT,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAES,QAAQ,KAAI,IAAI;IACpCC,QAAQ,EAAE,CAAAV,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEU,QAAQ,KAAI;EAClC,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,wBAAwB,GAAG,MAAAA,CAAA,KAAY;EAClD,IAAI;IACF,MAAM5F,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAAC,8BAA8B,CAAC;IAEtE,OAAO;MACL+E,IAAI,EAAEhF,QAAQ,CAACgF,IAAI;MACnBa,SAAS,EAAE7F,QAAQ,CAAC6F,SAAS;MAC7BC,YAAY,EAAE9F,QAAQ,CAAC8F;IACzB,CAAC;EACH,CAAC,CAAC,OAAOzE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAM0E,aAAa,GAAG,MAAOxF,QAAQ,IAAK;EAC/C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAML,UAAU,CAAC0F,MAAM,CAAC7F,aAAa,CAACsF,KAAK,CAACkB,MAAM,EAAE;MACnEC,IAAI,EAAE;QAAE1F;MAAS;IACnB,CAAC,CAAC;;IAEF;IACAb,OAAO,CAACwG,eAAe,CAAC,CAAC;;IAEzB;IACAnF,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,sBAAsB,CAAC,CAAC;IAE7DrB,KAAK,CAACuB,OAAO,CAACnB,QAAQ,CAACW,OAAO,IAAI,6BAA6B,CAAC;IAEhE,OAAOX,QAAQ;EACjB,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAM8E,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF;IACAzG,OAAO,CAAC0G,WAAW,CAAC,CAAC;;IAErB;IACA,IAAIrD,eAAe,CAAC,CAAC,EAAE;MACrB,MAAMsD,OAAO,GAAG,MAAMlD,aAAa,CAAC,CAAC;MAErC,IAAIkD,OAAO,EAAE;QACX;QACA,MAAM7F,IAAI,GAAGwC,cAAc,CAAC,CAAC;QAC7BjC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,kBAAkB,EAAE;UACvDC,MAAM,EAAE;YAAEV,IAAI;YAAEuC,eAAe,EAAE;UAAK;QACxC,CAAC,CAAC,CAAC;MACL;IACF,CAAC,MAAM;MACL;MACAhC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,kBAAkB,EAAE;QACvDC,MAAM,EAAE;UAAEV,IAAI,EAAE,IAAI;UAAEuC,eAAe,EAAE;QAAM;MAC/C,CAAC,CAAC,CAAC;IACL;EACF,CAAC,CAAC,OAAO1B,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;;IAEzD;IACAN,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,kBAAkB,EAAE;MACvDC,MAAM,EAAE;QAAEV,IAAI,EAAE,IAAI;QAAEuC,eAAe,EAAE;MAAM;IAC/C,CAAC,CAAC,CAAC;EACL;AACF,CAAC;AAED,eAAe;EACblD,KAAK;EACL0B,QAAQ;EACRS,MAAM;EACNtB,YAAY;EACZqC,eAAe;EACfC,cAAc;EACdE,cAAc;EACdC,aAAa;EACbI,cAAc;EACdE,aAAa;EACbI,WAAW;EACXG,aAAa;EACbS,cAAc;EACdG,gBAAgB;EAChBQ,cAAc;EACdE,qBAAqB;EACrBM,wBAAwB;EACxBG,aAAa;EACbI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}