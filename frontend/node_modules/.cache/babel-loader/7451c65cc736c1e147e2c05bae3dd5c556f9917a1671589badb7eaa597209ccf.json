{"ast":null,"code":"/**\r\n * Utilitários de validação para formulários do GEDIE\r\n */\n\n// Expressões regulares\nconst REGEX = {\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  password: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/,\n  phone: /^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/,\n  cpf: /^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/,\n  name: /^[a-zA-ZÀ-ÿ\\s]{2,50}$/\n};\n\n// Mensagens de erro padrão\nconst ERROR_MESSAGES = {\n  required: 'Este campo é obrigatório',\n  email: 'Digite um email válido',\n  password: 'A senha deve ter pelo menos 8 caracteres, incluindo maiúscula, minúscula e número',\n  passwordConfirm: 'As senhas não coincidem',\n  minLength: min => `Deve ter pelo menos ${min} caracteres`,\n  maxLength: max => `Deve ter no máximo ${max} caracteres`,\n  name: 'Nome deve conter apenas letras e espaços',\n  phone: 'Formato: (11) 99999-9999',\n  cpf: 'CPF inválido',\n  terms: 'Você deve aceitar os termos de uso'\n};\n\n/**\r\n * Valida se um campo é obrigatório\r\n */\nexport const validateRequired = value => {\n  if (!value || value.toString().trim() === '') {\n    return ERROR_MESSAGES.required;\n  }\n  return null;\n};\n\n/**\r\n * Valida formato de email\r\n */\nexport const validateEmail = email => {\n  if (!email) return ERROR_MESSAGES.required;\n  if (!REGEX.email.test(email.trim())) {\n    return ERROR_MESSAGES.email;\n  }\n  return null;\n};\n\n/**\r\n * Valida senha forte\r\n */\nexport const validatePassword = password => {\n  if (!password) return ERROR_MESSAGES.required;\n  if (password.length < 8) {\n    return ERROR_MESSAGES.minLength(8);\n  }\n  if (!REGEX.password.test(password)) {\n    return ERROR_MESSAGES.password;\n  }\n  return null;\n};\n\n/**\r\n * Valida confirmação de senha\r\n */\nexport const validatePasswordConfirm = (password, confirmPassword) => {\n  if (!confirmPassword) return ERROR_MESSAGES.required;\n  if (password !== confirmPassword) {\n    return ERROR_MESSAGES.passwordConfirm;\n  }\n  return null;\n};\n\n/**\r\n * Valida nome completo\r\n */\nexport const validateName = name => {\n  if (!name) return ERROR_MESSAGES.required;\n  const trimmedName = name.trim();\n  if (trimmedName.length < 2) {\n    return ERROR_MESSAGES.minLength(2);\n  }\n  if (trimmedName.length > 50) {\n    return ERROR_MESSAGES.maxLength(50);\n  }\n  if (!REGEX.name.test(trimmedName)) {\n    return ERROR_MESSAGES.name;\n  }\n  return null;\n};\n\n/**\r\n * Valida telefone brasileiro\r\n */\nexport const validatePhone = phone => {\n  if (!phone) return null; // Telefone é opcional\n\n  if (!REGEX.phone.test(phone)) {\n    return ERROR_MESSAGES.phone;\n  }\n  return null;\n};\n\n/**\r\n * Valida CPF brasileiro\r\n */\nexport const validateCPF = cpf => {\n  if (!cpf) return null; // CPF é opcional\n\n  // Remove formatação\n  const cleanCPF = cpf.replace(/\\D/g, '');\n  if (cleanCPF.length !== 11) {\n    return ERROR_MESSAGES.cpf;\n  }\n\n  // Verifica se todos os dígitos são iguais\n  if (/^(\\d)\\1+$/.test(cleanCPF)) {\n    return ERROR_MESSAGES.cpf;\n  }\n\n  // Validação do dígito verificador\n  let sum = 0;\n  for (let i = 0; i < 9; i++) {\n    sum += parseInt(cleanCPF[i]) * (10 - i);\n  }\n  let remainder = sum % 11;\n  let digit1 = remainder < 2 ? 0 : 11 - remainder;\n  if (parseInt(cleanCPF[9]) !== digit1) {\n    return ERROR_MESSAGES.cpf;\n  }\n  sum = 0;\n  for (let i = 0; i < 10; i++) {\n    sum += parseInt(cleanCPF[i]) * (11 - i);\n  }\n  remainder = sum % 11;\n  let digit2 = remainder < 2 ? 0 : 11 - remainder;\n  if (parseInt(cleanCPF[10]) !== digit2) {\n    return ERROR_MESSAGES.cpf;\n  }\n  return null;\n};\n\n/**\r\n * Valida checkbox de termos\r\n */\nexport const validateTerms = accepted => {\n  if (!accepted) {\n    return ERROR_MESSAGES.terms;\n  }\n  return null;\n};\n\n/**\r\n * Valida formulário de login\r\n */\nexport const validateLoginForm = data => {\n  const errors = {};\n  const emailError = validateEmail(data.email);\n  if (emailError) errors.email = emailError;\n  const passwordError = validateRequired(data.password);\n  if (passwordError) errors.password = passwordError;\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n/**\r\n * Valida formulário de cadastro\r\n */\nexport const validateRegisterForm = data => {\n  const errors = {};\n  const nameError = validateName(data.name);\n  if (nameError) errors.name = nameError;\n  const emailError = validateEmail(data.email);\n  if (emailError) errors.email = emailError;\n  const passwordError = validatePassword(data.password);\n  if (passwordError) errors.password = passwordError;\n  const confirmPasswordError = validatePasswordConfirm(data.password, data.confirmPassword);\n  if (confirmPasswordError) errors.confirmPassword = confirmPasswordError;\n  const phoneError = validatePhone(data.phone);\n  if (phoneError) errors.phone = phoneError;\n  const termsError = validateTerms(data.acceptTerms);\n  if (termsError) errors.acceptTerms = termsError;\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n/**\r\n * Sanitiza string removendo caracteres especiais\r\n */\nexport const sanitizeString = str => {\n  if (!str) return '';\n  return str.toString().trim().replace(/[<>]/g, '');\n};\n\n/**\r\n * Formata telefone brasileiro\r\n */\nexport const formatPhone = phone => {\n  if (!phone) return '';\n  const cleanPhone = phone.replace(/\\D/g, '');\n  if (cleanPhone.length === 10) {\n    return `(${cleanPhone.slice(0, 2)}) ${cleanPhone.slice(2, 6)}-${cleanPhone.slice(6)}`;\n  } else if (cleanPhone.length === 11) {\n    return `(${cleanPhone.slice(0, 2)}) ${cleanPhone.slice(2, 7)}-${cleanPhone.slice(7)}`;\n  }\n  return phone;\n};\n\n/**\r\n * Formata CPF brasileiro\r\n */\nexport const formatCPF = cpf => {\n  if (!cpf) return '';\n  const cleanCPF = cpf.replace(/\\D/g, '');\n  if (cleanCPF.length === 11) {\n    return `${cleanCPF.slice(0, 3)}.${cleanCPF.slice(3, 6)}.${cleanCPF.slice(6, 9)}-${cleanCPF.slice(9)}`;\n  }\n  return cpf;\n};\nexport default {\n  validateRequired,\n  validateEmail,\n  validatePassword,\n  validatePasswordConfirm,\n  validateName,\n  validatePhone,\n  validateCPF,\n  validateTerms,\n  validateLoginForm,\n  validateRegisterForm,\n  sanitizeString,\n  formatPhone,\n  formatCPF,\n  ERROR_MESSAGES,\n  REGEX\n};","map":{"version":3,"names":["REGEX","email","password","phone","cpf","name","ERROR_MESSAGES","required","passwordConfirm","minLength","min","maxLength","max","terms","validateRequired","value","toString","trim","validateEmail","test","validatePassword","length","validatePasswordConfirm","confirmPassword","validateName","trimmedName","validatePhone","validateCPF","cleanCPF","replace","sum","i","parseInt","remainder","digit1","digit2","validateTerms","accepted","validateLoginForm","data","errors","emailError","passwordError","isValid","Object","keys","validateRegisterForm","nameError","confirmPasswordError","phoneError","termsError","acceptTerms","sanitizeString","str","formatPhone","cleanPhone","slice","formatCPF"],"sources":["C:/Users/xvito/OneDrive/Área de Trabalho/TRABALHO/GEDIE-MVC/frontend/src/utils/validation.js"],"sourcesContent":["/**\r\n * Utilitários de validação para formulários do GEDIE\r\n */\r\n\r\n// Expressões regulares\r\nconst REGEX = {\r\n    email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n    password: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/,\r\n    phone: /^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/,\r\n    cpf: /^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/,\r\n    name: /^[a-zA-ZÀ-ÿ\\s]{2,50}$/\r\n  };\r\n  \r\n  // Mensagens de erro padrão\r\n  const ERROR_MESSAGES = {\r\n    required: 'Este campo é obrigatório',\r\n    email: 'Digite um email válido',\r\n    password: 'A senha deve ter pelo menos 8 caracteres, incluindo maiúscula, minúscula e número',\r\n    passwordConfirm: 'As senhas não coincidem',\r\n    minLength: (min) => `Deve ter pelo menos ${min} caracteres`,\r\n    maxLength: (max) => `Deve ter no máximo ${max} caracteres`,\r\n    name: 'Nome deve conter apenas letras e espaços',\r\n    phone: 'Formato: (11) 99999-9999',\r\n    cpf: 'CPF inválido',\r\n    terms: 'Você deve aceitar os termos de uso'\r\n  };\r\n  \r\n  /**\r\n   * Valida se um campo é obrigatório\r\n   */\r\n  export const validateRequired = (value) => {\r\n    if (!value || value.toString().trim() === '') {\r\n      return ERROR_MESSAGES.required;\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  /**\r\n   * Valida formato de email\r\n   */\r\n  export const validateEmail = (email) => {\r\n    if (!email) return ERROR_MESSAGES.required;\r\n    \r\n    if (!REGEX.email.test(email.trim())) {\r\n      return ERROR_MESSAGES.email;\r\n    }\r\n    \r\n    return null;\r\n  };\r\n  \r\n  /**\r\n   * Valida senha forte\r\n   */\r\n  export const validatePassword = (password) => {\r\n    if (!password) return ERROR_MESSAGES.required;\r\n    \r\n    if (password.length < 8) {\r\n      return ERROR_MESSAGES.minLength(8);\r\n    }\r\n    \r\n    if (!REGEX.password.test(password)) {\r\n      return ERROR_MESSAGES.password;\r\n    }\r\n    \r\n    return null;\r\n  };\r\n  \r\n  /**\r\n   * Valida confirmação de senha\r\n   */\r\n  export const validatePasswordConfirm = (password, confirmPassword) => {\r\n    if (!confirmPassword) return ERROR_MESSAGES.required;\r\n    \r\n    if (password !== confirmPassword) {\r\n      return ERROR_MESSAGES.passwordConfirm;\r\n    }\r\n    \r\n    return null;\r\n  };\r\n  \r\n  /**\r\n   * Valida nome completo\r\n   */\r\n  export const validateName = (name) => {\r\n    if (!name) return ERROR_MESSAGES.required;\r\n    \r\n    const trimmedName = name.trim();\r\n    \r\n    if (trimmedName.length < 2) {\r\n      return ERROR_MESSAGES.minLength(2);\r\n    }\r\n    \r\n    if (trimmedName.length > 50) {\r\n      return ERROR_MESSAGES.maxLength(50);\r\n    }\r\n    \r\n    if (!REGEX.name.test(trimmedName)) {\r\n      return ERROR_MESSAGES.name;\r\n    }\r\n    \r\n    return null;\r\n  };\r\n  \r\n  /**\r\n   * Valida telefone brasileiro\r\n   */\r\n  export const validatePhone = (phone) => {\r\n    if (!phone) return null; // Telefone é opcional\r\n    \r\n    if (!REGEX.phone.test(phone)) {\r\n      return ERROR_MESSAGES.phone;\r\n    }\r\n    \r\n    return null;\r\n  };\r\n  \r\n  /**\r\n   * Valida CPF brasileiro\r\n   */\r\n  export const validateCPF = (cpf) => {\r\n    if (!cpf) return null; // CPF é opcional\r\n    \r\n    // Remove formatação\r\n    const cleanCPF = cpf.replace(/\\D/g, '');\r\n    \r\n    if (cleanCPF.length !== 11) {\r\n      return ERROR_MESSAGES.cpf;\r\n    }\r\n    \r\n    // Verifica se todos os dígitos são iguais\r\n    if (/^(\\d)\\1+$/.test(cleanCPF)) {\r\n      return ERROR_MESSAGES.cpf;\r\n    }\r\n    \r\n    // Validação do dígito verificador\r\n    let sum = 0;\r\n    for (let i = 0; i < 9; i++) {\r\n      sum += parseInt(cleanCPF[i]) * (10 - i);\r\n    }\r\n    \r\n    let remainder = sum % 11;\r\n    let digit1 = remainder < 2 ? 0 : 11 - remainder;\r\n    \r\n    if (parseInt(cleanCPF[9]) !== digit1) {\r\n      return ERROR_MESSAGES.cpf;\r\n    }\r\n    \r\n    sum = 0;\r\n    for (let i = 0; i < 10; i++) {\r\n      sum += parseInt(cleanCPF[i]) * (11 - i);\r\n    }\r\n    \r\n    remainder = sum % 11;\r\n    let digit2 = remainder < 2 ? 0 : 11 - remainder;\r\n    \r\n    if (parseInt(cleanCPF[10]) !== digit2) {\r\n      return ERROR_MESSAGES.cpf;\r\n    }\r\n    \r\n    return null;\r\n  };\r\n  \r\n  /**\r\n   * Valida checkbox de termos\r\n   */\r\n  export const validateTerms = (accepted) => {\r\n    if (!accepted) {\r\n      return ERROR_MESSAGES.terms;\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  /**\r\n   * Valida formulário de login\r\n   */\r\n  export const validateLoginForm = (data) => {\r\n    const errors = {};\r\n    \r\n    const emailError = validateEmail(data.email);\r\n    if (emailError) errors.email = emailError;\r\n    \r\n    const passwordError = validateRequired(data.password);\r\n    if (passwordError) errors.password = passwordError;\r\n    \r\n    return {\r\n      isValid: Object.keys(errors).length === 0,\r\n      errors\r\n    };\r\n  };\r\n  \r\n  /**\r\n   * Valida formulário de cadastro\r\n   */\r\n  export const validateRegisterForm = (data) => {\r\n    const errors = {};\r\n    \r\n    const nameError = validateName(data.name);\r\n    if (nameError) errors.name = nameError;\r\n    \r\n    const emailError = validateEmail(data.email);\r\n    if (emailError) errors.email = emailError;\r\n    \r\n    const passwordError = validatePassword(data.password);\r\n    if (passwordError) errors.password = passwordError;\r\n    \r\n    const confirmPasswordError = validatePasswordConfirm(data.password, data.confirmPassword);\r\n    if (confirmPasswordError) errors.confirmPassword = confirmPasswordError;\r\n    \r\n    const phoneError = validatePhone(data.phone);\r\n    if (phoneError) errors.phone = phoneError;\r\n    \r\n    const termsError = validateTerms(data.acceptTerms);\r\n    if (termsError) errors.acceptTerms = termsError;\r\n    \r\n    return {\r\n      isValid: Object.keys(errors).length === 0,\r\n      errors\r\n    };\r\n  };\r\n  \r\n  /**\r\n   * Sanitiza string removendo caracteres especiais\r\n   */\r\n  export const sanitizeString = (str) => {\r\n    if (!str) return '';\r\n    return str.toString().trim().replace(/[<>]/g, '');\r\n  };\r\n  \r\n  /**\r\n   * Formata telefone brasileiro\r\n   */\r\n  export const formatPhone = (phone) => {\r\n    if (!phone) return '';\r\n    \r\n    const cleanPhone = phone.replace(/\\D/g, '');\r\n    \r\n    if (cleanPhone.length === 10) {\r\n      return `(${cleanPhone.slice(0, 2)}) ${cleanPhone.slice(2, 6)}-${cleanPhone.slice(6)}`;\r\n    } else if (cleanPhone.length === 11) {\r\n      return `(${cleanPhone.slice(0, 2)}) ${cleanPhone.slice(2, 7)}-${cleanPhone.slice(7)}`;\r\n    }\r\n    \r\n    return phone;\r\n  };\r\n  \r\n  /**\r\n   * Formata CPF brasileiro\r\n   */\r\n  export const formatCPF = (cpf) => {\r\n    if (!cpf) return '';\r\n    \r\n    const cleanCPF = cpf.replace(/\\D/g, '');\r\n    \r\n    if (cleanCPF.length === 11) {\r\n      return `${cleanCPF.slice(0, 3)}.${cleanCPF.slice(3, 6)}.${cleanCPF.slice(6, 9)}-${cleanCPF.slice(9)}`;\r\n    }\r\n    \r\n    return cpf;\r\n  };\r\n  \r\n  export default {\r\n    validateRequired,\r\n    validateEmail,\r\n    validatePassword,\r\n    validatePasswordConfirm,\r\n    validateName,\r\n    validatePhone,\r\n    validateCPF,\r\n    validateTerms,\r\n    validateLoginForm,\r\n    validateRegisterForm,\r\n    sanitizeString,\r\n    formatPhone,\r\n    formatCPF,\r\n    ERROR_MESSAGES,\r\n    REGEX\r\n  };"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,KAAK,GAAG;EACVC,KAAK,EAAE,4BAA4B;EACnCC,QAAQ,EAAE,uDAAuD;EACjEC,KAAK,EAAE,4BAA4B;EACnCC,GAAG,EAAE,6BAA6B;EAClCC,IAAI,EAAE;AACR,CAAC;;AAED;AACA,MAAMC,cAAc,GAAG;EACrBC,QAAQ,EAAE,0BAA0B;EACpCN,KAAK,EAAE,wBAAwB;EAC/BC,QAAQ,EAAE,mFAAmF;EAC7FM,eAAe,EAAE,yBAAyB;EAC1CC,SAAS,EAAGC,GAAG,IAAK,uBAAuBA,GAAG,aAAa;EAC3DC,SAAS,EAAGC,GAAG,IAAK,sBAAsBA,GAAG,aAAa;EAC1DP,IAAI,EAAE,0CAA0C;EAChDF,KAAK,EAAE,0BAA0B;EACjCC,GAAG,EAAE,cAAc;EACnBS,KAAK,EAAE;AACT,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EACzC,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC5C,OAAOX,cAAc,CAACC,QAAQ;EAChC;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMW,aAAa,GAAIjB,KAAK,IAAK;EACtC,IAAI,CAACA,KAAK,EAAE,OAAOK,cAAc,CAACC,QAAQ;EAE1C,IAAI,CAACP,KAAK,CAACC,KAAK,CAACkB,IAAI,CAAClB,KAAK,CAACgB,IAAI,CAAC,CAAC,CAAC,EAAE;IACnC,OAAOX,cAAc,CAACL,KAAK;EAC7B;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMmB,gBAAgB,GAAIlB,QAAQ,IAAK;EAC5C,IAAI,CAACA,QAAQ,EAAE,OAAOI,cAAc,CAACC,QAAQ;EAE7C,IAAIL,QAAQ,CAACmB,MAAM,GAAG,CAAC,EAAE;IACvB,OAAOf,cAAc,CAACG,SAAS,CAAC,CAAC,CAAC;EACpC;EAEA,IAAI,CAACT,KAAK,CAACE,QAAQ,CAACiB,IAAI,CAACjB,QAAQ,CAAC,EAAE;IAClC,OAAOI,cAAc,CAACJ,QAAQ;EAChC;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMoB,uBAAuB,GAAGA,CAACpB,QAAQ,EAAEqB,eAAe,KAAK;EACpE,IAAI,CAACA,eAAe,EAAE,OAAOjB,cAAc,CAACC,QAAQ;EAEpD,IAAIL,QAAQ,KAAKqB,eAAe,EAAE;IAChC,OAAOjB,cAAc,CAACE,eAAe;EACvC;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMgB,YAAY,GAAInB,IAAI,IAAK;EACpC,IAAI,CAACA,IAAI,EAAE,OAAOC,cAAc,CAACC,QAAQ;EAEzC,MAAMkB,WAAW,GAAGpB,IAAI,CAACY,IAAI,CAAC,CAAC;EAE/B,IAAIQ,WAAW,CAACJ,MAAM,GAAG,CAAC,EAAE;IAC1B,OAAOf,cAAc,CAACG,SAAS,CAAC,CAAC,CAAC;EACpC;EAEA,IAAIgB,WAAW,CAACJ,MAAM,GAAG,EAAE,EAAE;IAC3B,OAAOf,cAAc,CAACK,SAAS,CAAC,EAAE,CAAC;EACrC;EAEA,IAAI,CAACX,KAAK,CAACK,IAAI,CAACc,IAAI,CAACM,WAAW,CAAC,EAAE;IACjC,OAAOnB,cAAc,CAACD,IAAI;EAC5B;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMqB,aAAa,GAAIvB,KAAK,IAAK;EACtC,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI,CAAC,CAAC;;EAEzB,IAAI,CAACH,KAAK,CAACG,KAAK,CAACgB,IAAI,CAAChB,KAAK,CAAC,EAAE;IAC5B,OAAOG,cAAc,CAACH,KAAK;EAC7B;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMwB,WAAW,GAAIvB,GAAG,IAAK;EAClC,IAAI,CAACA,GAAG,EAAE,OAAO,IAAI,CAAC,CAAC;;EAEvB;EACA,MAAMwB,QAAQ,GAAGxB,GAAG,CAACyB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAEvC,IAAID,QAAQ,CAACP,MAAM,KAAK,EAAE,EAAE;IAC1B,OAAOf,cAAc,CAACF,GAAG;EAC3B;;EAEA;EACA,IAAI,WAAW,CAACe,IAAI,CAACS,QAAQ,CAAC,EAAE;IAC9B,OAAOtB,cAAc,CAACF,GAAG;EAC3B;;EAEA;EACA,IAAI0B,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,GAAG,IAAIE,QAAQ,CAACJ,QAAQ,CAACG,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EACzC;EAEA,IAAIE,SAAS,GAAGH,GAAG,GAAG,EAAE;EACxB,IAAII,MAAM,GAAGD,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAGA,SAAS;EAE/C,IAAID,QAAQ,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAKM,MAAM,EAAE;IACpC,OAAO5B,cAAc,CAACF,GAAG;EAC3B;EAEA0B,GAAG,GAAG,CAAC;EACP,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3BD,GAAG,IAAIE,QAAQ,CAACJ,QAAQ,CAACG,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EACzC;EAEAE,SAAS,GAAGH,GAAG,GAAG,EAAE;EACpB,IAAIK,MAAM,GAAGF,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAGA,SAAS;EAE/C,IAAID,QAAQ,CAACJ,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAKO,MAAM,EAAE;IACrC,OAAO7B,cAAc,CAACF,GAAG;EAC3B;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMgC,aAAa,GAAIC,QAAQ,IAAK;EACzC,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO/B,cAAc,CAACO,KAAK;EAC7B;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMyB,iBAAiB,GAAIC,IAAI,IAAK;EACzC,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,MAAMC,UAAU,GAAGvB,aAAa,CAACqB,IAAI,CAACtC,KAAK,CAAC;EAC5C,IAAIwC,UAAU,EAAED,MAAM,CAACvC,KAAK,GAAGwC,UAAU;EAEzC,MAAMC,aAAa,GAAG5B,gBAAgB,CAACyB,IAAI,CAACrC,QAAQ,CAAC;EACrD,IAAIwC,aAAa,EAAEF,MAAM,CAACtC,QAAQ,GAAGwC,aAAa;EAElD,OAAO;IACLC,OAAO,EAAEC,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACnB,MAAM,KAAK,CAAC;IACzCmB;EACF,CAAC;AACH,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMM,oBAAoB,GAAIP,IAAI,IAAK;EAC5C,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,MAAMO,SAAS,GAAGvB,YAAY,CAACe,IAAI,CAAClC,IAAI,CAAC;EACzC,IAAI0C,SAAS,EAAEP,MAAM,CAACnC,IAAI,GAAG0C,SAAS;EAEtC,MAAMN,UAAU,GAAGvB,aAAa,CAACqB,IAAI,CAACtC,KAAK,CAAC;EAC5C,IAAIwC,UAAU,EAAED,MAAM,CAACvC,KAAK,GAAGwC,UAAU;EAEzC,MAAMC,aAAa,GAAGtB,gBAAgB,CAACmB,IAAI,CAACrC,QAAQ,CAAC;EACrD,IAAIwC,aAAa,EAAEF,MAAM,CAACtC,QAAQ,GAAGwC,aAAa;EAElD,MAAMM,oBAAoB,GAAG1B,uBAAuB,CAACiB,IAAI,CAACrC,QAAQ,EAAEqC,IAAI,CAAChB,eAAe,CAAC;EACzF,IAAIyB,oBAAoB,EAAER,MAAM,CAACjB,eAAe,GAAGyB,oBAAoB;EAEvE,MAAMC,UAAU,GAAGvB,aAAa,CAACa,IAAI,CAACpC,KAAK,CAAC;EAC5C,IAAI8C,UAAU,EAAET,MAAM,CAACrC,KAAK,GAAG8C,UAAU;EAEzC,MAAMC,UAAU,GAAGd,aAAa,CAACG,IAAI,CAACY,WAAW,CAAC;EAClD,IAAID,UAAU,EAAEV,MAAM,CAACW,WAAW,GAAGD,UAAU;EAE/C,OAAO;IACLP,OAAO,EAAEC,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACnB,MAAM,KAAK,CAAC;IACzCmB;EACF,CAAC;AACH,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMY,cAAc,GAAIC,GAAG,IAAK;EACrC,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;EACnB,OAAOA,GAAG,CAACrC,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACY,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;AACnD,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMyB,WAAW,GAAInD,KAAK,IAAK;EACpC,IAAI,CAACA,KAAK,EAAE,OAAO,EAAE;EAErB,MAAMoD,UAAU,GAAGpD,KAAK,CAAC0B,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAE3C,IAAI0B,UAAU,CAAClC,MAAM,KAAK,EAAE,EAAE;IAC5B,OAAO,IAAIkC,UAAU,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAKD,UAAU,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAID,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;EACvF,CAAC,MAAM,IAAID,UAAU,CAAClC,MAAM,KAAK,EAAE,EAAE;IACnC,OAAO,IAAIkC,UAAU,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAKD,UAAU,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAID,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;EACvF;EAEA,OAAOrD,KAAK;AACd,CAAC;;AAED;AACF;AACA;AACE,OAAO,MAAMsD,SAAS,GAAIrD,GAAG,IAAK;EAChC,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;EAEnB,MAAMwB,QAAQ,GAAGxB,GAAG,CAACyB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAEvC,IAAID,QAAQ,CAACP,MAAM,KAAK,EAAE,EAAE;IAC1B,OAAO,GAAGO,QAAQ,CAAC4B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI5B,QAAQ,CAAC4B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI5B,QAAQ,CAAC4B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI5B,QAAQ,CAAC4B,KAAK,CAAC,CAAC,CAAC,EAAE;EACvG;EAEA,OAAOpD,GAAG;AACZ,CAAC;AAED,eAAe;EACbU,gBAAgB;EAChBI,aAAa;EACbE,gBAAgB;EAChBE,uBAAuB;EACvBE,YAAY;EACZE,aAAa;EACbC,WAAW;EACXS,aAAa;EACbE,iBAAiB;EACjBQ,oBAAoB;EACpBM,cAAc;EACdE,WAAW;EACXG,SAAS;EACTnD,cAAc;EACdN;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}