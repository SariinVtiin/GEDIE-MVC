{"ast":null,"code":"/**\r\n * Utilitário para gerenciar localStorage de forma segura\r\n */\n\nimport { STORAGE_KEYS } from './constants';\n\n/**\r\n * Verifica se localStorage está disponível\r\n */\nconst isStorageAvailable = () => {\n  try {\n    const test = '__storage_test__';\n    localStorage.setItem(test, test);\n    localStorage.removeItem(test);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\r\n * Armazena um item no localStorage de forma segura\r\n */\nexport const setItem = (key, value) => {\n  if (!isStorageAvailable()) {\n    console.warn('localStorage não está disponível');\n    return false;\n  }\n  try {\n    const serializedValue = JSON.stringify(value);\n    localStorage.setItem(key, serializedValue);\n    return true;\n  } catch (error) {\n    console.error(`Erro ao armazenar item '${key}':`, error);\n    return false;\n  }\n};\n\n/**\r\n * Recupera um item do localStorage de forma segura\r\n */\nexport const getItem = (key, defaultValue = null) => {\n  if (!isStorageAvailable()) {\n    return defaultValue;\n  }\n  try {\n    const item = localStorage.getItem(key);\n    if (item === null) {\n      return defaultValue;\n    }\n    return JSON.parse(item);\n  } catch (error) {\n    console.error(`Erro ao recuperar item '${key}':`, error);\n    return defaultValue;\n  }\n};\n\n/**\r\n * Remove um item do localStorage\r\n */\nexport const removeItem = key => {\n  if (!isStorageAvailable()) {\n    return false;\n  }\n  try {\n    localStorage.removeItem(key);\n    return true;\n  } catch (error) {\n    console.error(`Erro ao remover item '${key}':`, error);\n    return false;\n  }\n};\n\n/**\r\n * Limpa todo o localStorage\r\n */\nexport const clear = () => {\n  if (!isStorageAvailable()) {\n    return false;\n  }\n  try {\n    localStorage.clear();\n    return true;\n  } catch (error) {\n    console.error('Erro ao limpar localStorage:', error);\n    return false;\n  }\n};\n\n/**\r\n * Verifica se um item existe no localStorage\r\n */\nexport const hasItem = key => {\n  if (!isStorageAvailable()) {\n    return false;\n  }\n  return localStorage.getItem(key) !== null;\n};\n\n/**\r\n * Obtém todos os itens do localStorage com um prefixo específico\r\n */\nexport const getItemsByPrefix = prefix => {\n  if (!isStorageAvailable()) {\n    return {};\n  }\n  const items = {};\n  try {\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith(prefix)) {\n        items[key] = getItem(key);\n      }\n    }\n  } catch (error) {\n    console.error(`Erro ao recuperar itens com prefixo '${prefix}':`, error);\n  }\n  return items;\n};\n\n/**\r\n * Remove todos os itens com um prefixo específico\r\n */\nexport const removeItemsByPrefix = prefix => {\n  if (!isStorageAvailable()) {\n    return false;\n  }\n  try {\n    const keysToRemove = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith(prefix)) {\n        keysToRemove.push(key);\n      }\n    }\n    keysToRemove.forEach(key => localStorage.removeItem(key));\n    return true;\n  } catch (error) {\n    console.error(`Erro ao remover itens com prefixo '${prefix}':`, error);\n    return false;\n  }\n};\n\n// Funções específicas para tokens de autenticação\nexport const auth = {\n  /**\r\n   * Armazena tokens de autenticação\r\n   */\n  setTokens: (accessToken, refreshToken, rememberMe = false) => {\n    setItem(STORAGE_KEYS.ACCESS_TOKEN, accessToken);\n    if (rememberMe) {\n      setItem(STORAGE_KEYS.REFRESH_TOKEN, refreshToken);\n      setItem(STORAGE_KEYS.REMEMBER_ME, true);\n    }\n  },\n  /**\r\n   * Recupera token de acesso\r\n   */\n  getAccessToken: () => {\n    return getItem(STORAGE_KEYS.ACCESS_TOKEN);\n  },\n  /**\r\n   * Recupera token de refresh\r\n   */\n  getRefreshToken: () => {\n    return getItem(STORAGE_KEYS.REFRESH_TOKEN);\n  },\n  /**\r\n   * Verifica se o usuário escolheu \"lembrar-me\"\r\n   */\n  getRememberMe: () => {\n    return getItem(STORAGE_KEYS.REMEMBER_ME, false);\n  },\n  /**\r\n   * Remove tokens de autenticação\r\n   */\n  clearTokens: () => {\n    removeItem(STORAGE_KEYS.ACCESS_TOKEN);\n    removeItem(STORAGE_KEYS.REFRESH_TOKEN);\n    removeItem(STORAGE_KEYS.REMEMBER_ME);\n  },\n  /**\r\n   * Verifica se o usuário está autenticado (tem token válido)\r\n   */\n  isAuthenticated: () => {\n    return hasItem(STORAGE_KEYS.ACCESS_TOKEN);\n  }\n};\n\n// Funções específicas para dados do usuário\nexport const user = {\n  /**\r\n   * Armazena dados do usuário\r\n   */\n  setData: userData => {\n    setItem(STORAGE_KEYS.USER_DATA, userData);\n  },\n  /**\r\n   * Recupera dados do usuário\r\n   */\n  getData: () => {\n    return getItem(STORAGE_KEYS.USER_DATA);\n  },\n  /**\r\n   * Atualiza dados específicos do usuário\r\n   */\n  updateData: updates => {\n    const currentData = getItem(STORAGE_KEYS.USER_DATA, {});\n    const updatedData = {\n      ...currentData,\n      ...updates\n    };\n    setItem(STORAGE_KEYS.USER_DATA, updatedData);\n  },\n  /**\r\n   * Remove dados do usuário\r\n   */\n  clearData: () => {\n    removeItem(STORAGE_KEYS.USER_DATA);\n  }\n};\n\n// Funções específicas para configurações\nexport const settings = {\n  /**\r\n   * Define tema da aplicação\r\n   */\n  setTheme: theme => {\n    setItem(STORAGE_KEYS.THEME, theme);\n  },\n  /**\r\n   * Recupera tema da aplicação\r\n   */\n  getTheme: () => {\n    return getItem(STORAGE_KEYS.THEME, 'light');\n  },\n  /**\r\n   * Define idioma da aplicação\r\n   */\n  setLanguage: language => {\n    setItem(STORAGE_KEYS.LANGUAGE, language);\n  },\n  /**\r\n   * Recupera idioma da aplicação\r\n   */\n  getLanguage: () => {\n    return getItem(STORAGE_KEYS.LANGUAGE, 'pt-BR');\n  }\n};\n\n// Funções específicas para sincronização com Telegram\nexport const telegram = {\n  /**\r\n   * Armazena dados de sincronização com Telegram\r\n   */\n  setSyncData: syncData => {\n    setItem(STORAGE_KEYS.TELEGRAM_SYNC, syncData);\n  },\n  /**\r\n   * Recupera dados de sincronização com Telegram\r\n   */\n  getSyncData: () => {\n    return getItem(STORAGE_KEYS.TELEGRAM_SYNC);\n  },\n  /**\r\n   * Remove dados de sincronização com Telegram\r\n   */\n  clearSyncData: () => {\n    removeItem(STORAGE_KEYS.TELEGRAM_SYNC);\n  },\n  /**\r\n   * Verifica se está sincronizado com Telegram\r\n   */\n  isSynced: () => {\n    const syncData = getItem(STORAGE_KEYS.TELEGRAM_SYNC);\n    return syncData && syncData.isLinked;\n  }\n};\n\n/**\r\n * Limpa todos os dados da aplicação\r\n */\nexport const clearAllAppData = () => {\n  auth.clearTokens();\n  user.clearData();\n  telegram.clearSyncData();\n\n  // Remove outros dados específicos da aplicação\n  removeItemsByPrefix('gedie_');\n};\n\n/**\r\n * Migra dados de versões antigas (se necessário)\r\n */\nexport const migrateData = () => {\n  // Implementar migrações de dados se necessário\n  // Por exemplo, mudanças na estrutura de dados entre versões\n  const version = getItem('app_version', '1.0.0');\n\n  // Exemplo de migração\n  if (version === '1.0.0') {\n    // Migrar dados específicos\n    setItem('app_version', '1.1.0');\n  }\n};\n\n/**\r\n * Exporta dados para backup\r\n */\nexport const exportData = () => {\n  if (!isStorageAvailable()) {\n    return null;\n  }\n  const data = {};\n  const appKeys = Object.values(STORAGE_KEYS);\n  appKeys.forEach(key => {\n    if (hasItem(key)) {\n      data[key] = getItem(key);\n    }\n  });\n  return {\n    version: '1.0.0',\n    timestamp: new Date().toISOString(),\n    data\n  };\n};\n\n/**\r\n * Importa dados de backup\r\n */\nexport const importData = backupData => {\n  if (!backupData || !backupData.data) {\n    return false;\n  }\n  try {\n    Object.entries(backupData.data).forEach(([key, value]) => {\n      setItem(key, value);\n    });\n    return true;\n  } catch (error) {\n    console.error('Erro ao importar dados:', error);\n    return false;\n  }\n};\nexport default {\n  setItem,\n  getItem,\n  removeItem,\n  clear,\n  hasItem,\n  getItemsByPrefix,\n  removeItemsByPrefix,\n  auth,\n  user,\n  settings,\n  telegram,\n  clearAllAppData,\n  migrateData,\n  exportData,\n  importData,\n  isStorageAvailable\n};","map":{"version":3,"names":["STORAGE_KEYS","isStorageAvailable","test","localStorage","setItem","removeItem","key","value","console","warn","serializedValue","JSON","stringify","error","getItem","defaultValue","item","parse","clear","hasItem","getItemsByPrefix","prefix","items","i","length","startsWith","removeItemsByPrefix","keysToRemove","push","forEach","auth","setTokens","accessToken","refreshToken","rememberMe","ACCESS_TOKEN","REFRESH_TOKEN","REMEMBER_ME","getAccessToken","getRefreshToken","getRememberMe","clearTokens","isAuthenticated","user","setData","userData","USER_DATA","getData","updateData","updates","currentData","updatedData","clearData","settings","setTheme","theme","THEME","getTheme","setLanguage","language","LANGUAGE","getLanguage","telegram","setSyncData","syncData","TELEGRAM_SYNC","getSyncData","clearSyncData","isSynced","isLinked","clearAllAppData","migrateData","version","exportData","data","appKeys","Object","values","timestamp","Date","toISOString","importData","backupData","entries"],"sources":["C:/Users/xvito/OneDrive/Área de Trabalho/TRABALHO/GEDIE-MVC/frontend/src/utils/storage.js"],"sourcesContent":["/**\r\n * Utilitário para gerenciar localStorage de forma segura\r\n */\r\n\r\nimport { STORAGE_KEYS } from './constants';\r\n\r\n/**\r\n * Verifica se localStorage está disponível\r\n */\r\nconst isStorageAvailable = () => {\r\n  try {\r\n    const test = '__storage_test__';\r\n    localStorage.setItem(test, test);\r\n    localStorage.removeItem(test);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Armazena um item no localStorage de forma segura\r\n */\r\nexport const setItem = (key, value) => {\r\n  if (!isStorageAvailable()) {\r\n    console.warn('localStorage não está disponível');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const serializedValue = JSON.stringify(value);\r\n    localStorage.setItem(key, serializedValue);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Erro ao armazenar item '${key}':`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Recupera um item do localStorage de forma segura\r\n */\r\nexport const getItem = (key, defaultValue = null) => {\r\n  if (!isStorageAvailable()) {\r\n    return defaultValue;\r\n  }\r\n\r\n  try {\r\n    const item = localStorage.getItem(key);\r\n    if (item === null) {\r\n      return defaultValue;\r\n    }\r\n    return JSON.parse(item);\r\n  } catch (error) {\r\n    console.error(`Erro ao recuperar item '${key}':`, error);\r\n    return defaultValue;\r\n  }\r\n};\r\n\r\n/**\r\n * Remove um item do localStorage\r\n */\r\nexport const removeItem = (key) => {\r\n  if (!isStorageAvailable()) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    localStorage.removeItem(key);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Erro ao remover item '${key}':`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Limpa todo o localStorage\r\n */\r\nexport const clear = () => {\r\n  if (!isStorageAvailable()) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    localStorage.clear();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Erro ao limpar localStorage:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Verifica se um item existe no localStorage\r\n */\r\nexport const hasItem = (key) => {\r\n  if (!isStorageAvailable()) {\r\n    return false;\r\n  }\r\n\r\n  return localStorage.getItem(key) !== null;\r\n};\r\n\r\n/**\r\n * Obtém todos os itens do localStorage com um prefixo específico\r\n */\r\nexport const getItemsByPrefix = (prefix) => {\r\n  if (!isStorageAvailable()) {\r\n    return {};\r\n  }\r\n\r\n  const items = {};\r\n  \r\n  try {\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith(prefix)) {\r\n        items[key] = getItem(key);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(`Erro ao recuperar itens com prefixo '${prefix}':`, error);\r\n  }\r\n\r\n  return items;\r\n};\r\n\r\n/**\r\n * Remove todos os itens com um prefixo específico\r\n */\r\nexport const removeItemsByPrefix = (prefix) => {\r\n  if (!isStorageAvailable()) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const keysToRemove = [];\r\n    \r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith(prefix)) {\r\n        keysToRemove.push(key);\r\n      }\r\n    }\r\n\r\n    keysToRemove.forEach(key => localStorage.removeItem(key));\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Erro ao remover itens com prefixo '${prefix}':`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Funções específicas para tokens de autenticação\r\nexport const auth = {\r\n  /**\r\n   * Armazena tokens de autenticação\r\n   */\r\n  setTokens: (accessToken, refreshToken, rememberMe = false) => {\r\n    setItem(STORAGE_KEYS.ACCESS_TOKEN, accessToken);\r\n    \r\n    if (rememberMe) {\r\n      setItem(STORAGE_KEYS.REFRESH_TOKEN, refreshToken);\r\n      setItem(STORAGE_KEYS.REMEMBER_ME, true);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Recupera token de acesso\r\n   */\r\n  getAccessToken: () => {\r\n    return getItem(STORAGE_KEYS.ACCESS_TOKEN);\r\n  },\r\n\r\n  /**\r\n   * Recupera token de refresh\r\n   */\r\n  getRefreshToken: () => {\r\n    return getItem(STORAGE_KEYS.REFRESH_TOKEN);\r\n  },\r\n\r\n  /**\r\n   * Verifica se o usuário escolheu \"lembrar-me\"\r\n   */\r\n  getRememberMe: () => {\r\n    return getItem(STORAGE_KEYS.REMEMBER_ME, false);\r\n  },\r\n\r\n  /**\r\n   * Remove tokens de autenticação\r\n   */\r\n  clearTokens: () => {\r\n    removeItem(STORAGE_KEYS.ACCESS_TOKEN);\r\n    removeItem(STORAGE_KEYS.REFRESH_TOKEN);\r\n    removeItem(STORAGE_KEYS.REMEMBER_ME);\r\n  },\r\n\r\n  /**\r\n   * Verifica se o usuário está autenticado (tem token válido)\r\n   */\r\n  isAuthenticated: () => {\r\n    return hasItem(STORAGE_KEYS.ACCESS_TOKEN);\r\n  }\r\n};\r\n\r\n// Funções específicas para dados do usuário\r\nexport const user = {\r\n  /**\r\n   * Armazena dados do usuário\r\n   */\r\n  setData: (userData) => {\r\n    setItem(STORAGE_KEYS.USER_DATA, userData);\r\n  },\r\n\r\n  /**\r\n   * Recupera dados do usuário\r\n   */\r\n  getData: () => {\r\n    return getItem(STORAGE_KEYS.USER_DATA);\r\n  },\r\n\r\n  /**\r\n   * Atualiza dados específicos do usuário\r\n   */\r\n  updateData: (updates) => {\r\n    const currentData = getItem(STORAGE_KEYS.USER_DATA, {});\r\n    const updatedData = { ...currentData, ...updates };\r\n    setItem(STORAGE_KEYS.USER_DATA, updatedData);\r\n  },\r\n\r\n  /**\r\n   * Remove dados do usuário\r\n   */\r\n  clearData: () => {\r\n    removeItem(STORAGE_KEYS.USER_DATA);\r\n  }\r\n};\r\n\r\n// Funções específicas para configurações\r\nexport const settings = {\r\n  /**\r\n   * Define tema da aplicação\r\n   */\r\n  setTheme: (theme) => {\r\n    setItem(STORAGE_KEYS.THEME, theme);\r\n  },\r\n\r\n  /**\r\n   * Recupera tema da aplicação\r\n   */\r\n  getTheme: () => {\r\n    return getItem(STORAGE_KEYS.THEME, 'light');\r\n  },\r\n\r\n  /**\r\n   * Define idioma da aplicação\r\n   */\r\n  setLanguage: (language) => {\r\n    setItem(STORAGE_KEYS.LANGUAGE, language);\r\n  },\r\n\r\n  /**\r\n   * Recupera idioma da aplicação\r\n   */\r\n  getLanguage: () => {\r\n    return getItem(STORAGE_KEYS.LANGUAGE, 'pt-BR');\r\n  }\r\n};\r\n\r\n// Funções específicas para sincronização com Telegram\r\nexport const telegram = {\r\n  /**\r\n   * Armazena dados de sincronização com Telegram\r\n   */\r\n  setSyncData: (syncData) => {\r\n    setItem(STORAGE_KEYS.TELEGRAM_SYNC, syncData);\r\n  },\r\n\r\n  /**\r\n   * Recupera dados de sincronização com Telegram\r\n   */\r\n  getSyncData: () => {\r\n    return getItem(STORAGE_KEYS.TELEGRAM_SYNC);\r\n  },\r\n\r\n  /**\r\n   * Remove dados de sincronização com Telegram\r\n   */\r\n  clearSyncData: () => {\r\n    removeItem(STORAGE_KEYS.TELEGRAM_SYNC);\r\n  },\r\n\r\n  /**\r\n   * Verifica se está sincronizado com Telegram\r\n   */\r\n  isSynced: () => {\r\n    const syncData = getItem(STORAGE_KEYS.TELEGRAM_SYNC);\r\n    return syncData && syncData.isLinked;\r\n  }\r\n};\r\n\r\n/**\r\n * Limpa todos os dados da aplicação\r\n */\r\nexport const clearAllAppData = () => {\r\n  auth.clearTokens();\r\n  user.clearData();\r\n  telegram.clearSyncData();\r\n  \r\n  // Remove outros dados específicos da aplicação\r\n  removeItemsByPrefix('gedie_');\r\n};\r\n\r\n/**\r\n * Migra dados de versões antigas (se necessário)\r\n */\r\nexport const migrateData = () => {\r\n  // Implementar migrações de dados se necessário\r\n  // Por exemplo, mudanças na estrutura de dados entre versões\r\n  const version = getItem('app_version', '1.0.0');\r\n  \r\n  // Exemplo de migração\r\n  if (version === '1.0.0') {\r\n    // Migrar dados específicos\r\n    setItem('app_version', '1.1.0');\r\n  }\r\n};\r\n\r\n/**\r\n * Exporta dados para backup\r\n */\r\nexport const exportData = () => {\r\n  if (!isStorageAvailable()) {\r\n    return null;\r\n  }\r\n\r\n  const data = {};\r\n  const appKeys = Object.values(STORAGE_KEYS);\r\n  \r\n  appKeys.forEach(key => {\r\n    if (hasItem(key)) {\r\n      data[key] = getItem(key);\r\n    }\r\n  });\r\n\r\n  return {\r\n    version: '1.0.0',\r\n    timestamp: new Date().toISOString(),\r\n    data\r\n  };\r\n};\r\n\r\n/**\r\n * Importa dados de backup\r\n */\r\nexport const importData = (backupData) => {\r\n  if (!backupData || !backupData.data) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    Object.entries(backupData.data).forEach(([key, value]) => {\r\n      setItem(key, value);\r\n    });\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Erro ao importar dados:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default {\r\n  setItem,\r\n  getItem,\r\n  removeItem,\r\n  clear,\r\n  hasItem,\r\n  getItemsByPrefix,\r\n  removeItemsByPrefix,\r\n  auth,\r\n  user,\r\n  settings,\r\n  telegram,\r\n  clearAllAppData,\r\n  migrateData,\r\n  exportData,\r\n  importData,\r\n  isStorageAvailable\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}