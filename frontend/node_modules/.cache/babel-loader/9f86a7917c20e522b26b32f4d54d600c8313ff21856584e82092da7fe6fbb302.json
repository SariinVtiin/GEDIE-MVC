{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xvito\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\TRABALHO\\\\GEDIE-MVC\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/**\r\n * Contexto de autenticação para gerenciar estado global do usuário\r\n */\n\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { AUTH_STATUS } from '../utils/constants';\nimport authService from '../services/authService';\n\n// Estado inicial\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  status: AUTH_STATUS.IDLE,\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null,\n  telegramSync: {\n    isLinked: false,\n    telegramId: null,\n    linkedAt: null,\n    lastSync: null\n  }\n};\n\n// Actions do reducer\nconst AUTH_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  SET_AUTHENTICATED: 'SET_AUTHENTICATED',\n  SET_UNAUTHENTICATED: 'SET_UNAUTHENTICATED',\n  SET_USER: 'SET_USER',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_TELEGRAM_SYNC: 'UPDATE_TELEGRAM_SYNC',\n  LOGOUT: 'LOGOUT'\n};\n\n// Reducer para gerenciar o estado de autenticação\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload,\n        status: action.payload ? AUTH_STATUS.LOADING : state.status\n      };\n    case AUTH_ACTIONS.SET_AUTHENTICATED:\n      return {\n        ...state,\n        status: AUTH_STATUS.AUTHENTICATED,\n        user: action.payload.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.SET_UNAUTHENTICATED:\n      return {\n        ...state,\n        status: AUTH_STATUS.UNAUTHENTICATED,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n        telegramSync: initialState.telegramSync\n      };\n    case AUTH_ACTIONS.SET_USER:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        },\n        error: null\n      };\n    case AUTH_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        status: AUTH_STATUS.ERROR,\n        error: action.payload,\n        isLoading: false\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null,\n        status: state.isAuthenticated ? AUTH_STATUS.AUTHENTICATED : AUTH_STATUS.UNAUTHENTICATED\n      };\n    case AUTH_ACTIONS.UPDATE_TELEGRAM_SYNC:\n      return {\n        ...state,\n        telegramSync: {\n          ...state.telegramSync,\n          ...action.payload\n        }\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...initialState,\n        isLoading: false,\n        status: AUTH_STATUS.UNAUTHENTICATED\n      };\n    default:\n      return state;\n  }\n};\n\n// Criação do contexto\nconst AuthContext = /*#__PURE__*/createContext({});\n\n// Hook para usar o contexto\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n\n// Provider do contexto\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Função para fazer login\n  const login = async (credentials, rememberMe = false) => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const result = await authService.login(credentials, rememberMe);\n      dispatch({\n        type: AUTH_ACTIONS.SET_AUTHENTICATED,\n        payload: {\n          user: result.user\n        }\n      });\n\n      // Atualiza status de sincronização do Telegram\n      updateTelegramSyncStatus();\n      return result;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Erro ao fazer login'\n      });\n      throw error;\n    }\n  };\n\n  // Função para fazer cadastro\n  const register = async userData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const result = await authService.register(userData);\n      dispatch({\n        type: AUTH_ACTIONS.SET_AUTHENTICATED,\n        payload: {\n          user: result.user\n        }\n      });\n      return result;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Erro ao fazer cadastro'\n      });\n      throw error;\n    }\n  };\n\n  // Função para fazer logout\n  const logout = async (silent = false) => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      await authService.logout(silent);\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n    } catch (error) {\n      console.error('Erro ao fazer logout:', error);\n      // Mesmo com erro, limpa o estado local\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n    }\n  };\n\n  // Função para atualizar perfil\n  const updateProfile = async profileData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const result = await authService.updateProfile(profileData);\n      dispatch({\n        type: AUTH_ACTIONS.SET_USER,\n        payload: result.user\n      });\n      return result;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Erro ao atualizar perfil'\n      });\n      throw error;\n    }\n  };\n\n  // Função para alterar senha\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const result = await authService.changePassword(currentPassword, newPassword);\n      return result;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Erro ao alterar senha'\n      });\n      throw error;\n    }\n  };\n\n  // Função para sincronizar com Telegram\n  const syncWithTelegram = async telegramCode => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const result = await authService.syncWithTelegram(telegramCode);\n\n      // Atualiza dados do usuário\n      if (result.user) {\n        dispatch({\n          type: AUTH_ACTIONS.SET_USER,\n          payload: result.user\n        });\n      }\n\n      // Atualiza status de sincronização\n      updateTelegramSyncStatus();\n      return result;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Erro ao sincronizar com Telegram'\n      });\n      throw error;\n    }\n  };\n\n  // Função para remover sincronização do Telegram\n  const unsyncTelegram = async () => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const result = await authService.unsyncTelegram();\n\n      // Atualiza dados do usuário\n      if (result.user) {\n        dispatch({\n          type: AUTH_ACTIONS.SET_USER,\n          payload: result.user\n        });\n      }\n\n      // Limpa status de sincronização\n      dispatch({\n        type: AUTH_ACTIONS.UPDATE_TELEGRAM_SYNC,\n        payload: initialState.telegramSync\n      });\n      return result;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Erro ao remover sincronização'\n      });\n      throw error;\n    }\n  };\n\n  // Função para gerar código de sincronização\n  const generateTelegramSyncCode = async () => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const result = await authService.generateTelegramSyncCode();\n      return result;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Erro ao gerar código'\n      });\n      throw error;\n    }\n  };\n\n  // Função para atualizar status de sincronização do Telegram\n  const updateTelegramSyncStatus = () => {\n    const syncStatus = authService.getTelegramSyncStatus();\n    dispatch({\n      type: AUTH_ACTIONS.UPDATE_TELEGRAM_SYNC,\n      payload: syncStatus\n    });\n  };\n\n  // Função para excluir conta\n  const deleteAccount = async password => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const result = await authService.deleteAccount(password);\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n      return result;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Erro ao excluir conta'\n      });\n      throw error;\n    }\n  };\n\n  // Função para limpar erros\n  const clearError = () => {\n    dispatch({\n      type: AUTH_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // Função para recarregar dados do usuário\n  const reloadUser = async () => {\n    try {\n      const isValid = await authService.validateToken();\n      if (isValid) {\n        const user = authService.getCurrentUser();\n        dispatch({\n          type: AUTH_ACTIONS.SET_USER,\n          payload: user\n        });\n        updateTelegramSyncStatus();\n      } else {\n        dispatch({\n          type: AUTH_ACTIONS.SET_UNAUTHENTICATED\n        });\n      }\n    } catch (error) {\n      console.error('Erro ao recarregar usuário:', error);\n      dispatch({\n        type: AUTH_ACTIONS.SET_UNAUTHENTICATED\n      });\n    }\n  };\n\n  // Efeito para inicializar a autenticação\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        dispatch({\n          type: AUTH_ACTIONS.SET_LOADING,\n          payload: true\n        });\n\n        // Inicializa o serviço de autenticação\n        await authService.initialize();\n      } catch (error) {\n        console.error('Erro ao inicializar autenticação:', error);\n        dispatch({\n          type: AUTH_ACTIONS.SET_UNAUTHENTICATED\n        });\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Listeners para eventos de autenticação\n  useEffect(() => {\n    const handleAuthInitialized = event => {\n      const {\n        user,\n        isAuthenticated\n      } = event.detail;\n      if (isAuthenticated && user) {\n        dispatch({\n          type: AUTH_ACTIONS.SET_AUTHENTICATED,\n          payload: {\n            user\n          }\n        });\n        updateTelegramSyncStatus();\n      } else {\n        dispatch({\n          type: AUTH_ACTIONS.SET_UNAUTHENTICATED\n        });\n      }\n    };\n    const handleAuthLogin = event => {\n      const {\n        user\n      } = event.detail;\n      dispatch({\n        type: AUTH_ACTIONS.SET_AUTHENTICATED,\n        payload: {\n          user\n        }\n      });\n      updateTelegramSyncStatus();\n    };\n    const handleAuthLogout = () => {\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n    };\n    const handleAccountDeleted = () => {\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n    };\n\n    // Adiciona listeners\n    window.addEventListener('auth:initialized', handleAuthInitialized);\n    window.addEventListener('auth:login', handleAuthLogin);\n    window.addEventListener('auth:logout', handleAuthLogout);\n    window.addEventListener('auth:account-deleted', handleAccountDeleted);\n\n    // Remove listeners na limpeza\n    return () => {\n      window.removeEventListener('auth:initialized', handleAuthInitialized);\n      window.removeEventListener('auth:login', handleAuthLogin);\n      window.removeEventListener('auth:logout', handleAuthLogout);\n      window.removeEventListener('auth:account-deleted', handleAccountDeleted);\n    };\n  }, []);\n\n  // Valor do contexto\n  const contextValue = {\n    // Estado\n    ...state,\n    // Funções\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    syncWithTelegram,\n    unsyncTelegram,\n    generateTelegramSyncCode,\n    deleteAccount,\n    clearError,\n    reloadUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 445,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","AUTH_STATUS","authService","jsxDEV","_jsxDEV","initialState","status","IDLE","user","isAuthenticated","isLoading","error","telegramSync","isLinked","telegramId","linkedAt","lastSync","AUTH_ACTIONS","SET_LOADING","SET_AUTHENTICATED","SET_UNAUTHENTICATED","SET_USER","SET_ERROR","CLEAR_ERROR","UPDATE_TELEGRAM_SYNC","LOGOUT","authReducer","state","action","type","payload","LOADING","AUTHENTICATED","UNAUTHENTICATED","ERROR","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","dispatch","login","credentials","rememberMe","result","updateTelegramSyncStatus","_error$response","_error$response$data","response","data","message","register","userData","_error$response2","_error$response2$data","logout","silent","console","updateProfile","profileData","_error$response3","_error$response3$data","changePassword","currentPassword","newPassword","_error$response4","_error$response4$data","syncWithTelegram","telegramCode","_error$response5","_error$response5$data","unsyncTelegram","_error$response6","_error$response6$data","generateTelegramSyncCode","_error$response7","_error$response7$data","syncStatus","getTelegramSyncStatus","deleteAccount","password","_error$response8","_error$response8$data","clearError","reloadUser","isValid","validateToken","getCurrentUser","initializeAuth","initialize","handleAuthInitialized","event","detail","handleAuthLogin","handleAuthLogout","handleAccountDeleted","window","addEventListener","removeEventListener","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/xvito/OneDrive/Área de Trabalho/TRABALHO/GEDIE-MVC/frontend/src/contexts/AuthContext.js"],"sourcesContent":["/**\r\n * Contexto de autenticação para gerenciar estado global do usuário\r\n */\r\n\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { AUTH_STATUS } from '../utils/constants';\r\nimport authService from '../services/authService';\r\n\r\n// Estado inicial\r\nconst initialState = {\r\n  status: AUTH_STATUS.IDLE,\r\n  user: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n  error: null,\r\n  telegramSync: {\r\n    isLinked: false,\r\n    telegramId: null,\r\n    linkedAt: null,\r\n    lastSync: null\r\n  }\r\n};\r\n\r\n// Actions do reducer\r\nconst AUTH_ACTIONS = {\r\n  SET_LOADING: 'SET_LOADING',\r\n  SET_AUTHENTICATED: 'SET_AUTHENTICATED',\r\n  SET_UNAUTHENTICATED: 'SET_UNAUTHENTICATED',\r\n  SET_USER: 'SET_USER',\r\n  SET_ERROR: 'SET_ERROR',\r\n  CLEAR_ERROR: 'CLEAR_ERROR',\r\n  UPDATE_TELEGRAM_SYNC: 'UPDATE_TELEGRAM_SYNC',\r\n  LOGOUT: 'LOGOUT'\r\n};\r\n\r\n// Reducer para gerenciar o estado de autenticação\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case AUTH_ACTIONS.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n        status: action.payload ? AUTH_STATUS.LOADING : state.status\r\n      };\r\n\r\n    case AUTH_ACTIONS.SET_AUTHENTICATED:\r\n      return {\r\n        ...state,\r\n        status: AUTH_STATUS.AUTHENTICATED,\r\n        user: action.payload.user,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.SET_UNAUTHENTICATED:\r\n      return {\r\n        ...state,\r\n        status: AUTH_STATUS.UNAUTHENTICATED,\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n        error: null,\r\n        telegramSync: initialState.telegramSync\r\n      };\r\n\r\n    case AUTH_ACTIONS.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: { ...state.user, ...action.payload },\r\n        error: null\r\n      };\r\n\r\n    case AUTH_ACTIONS.SET_ERROR:\r\n      return {\r\n        ...state,\r\n        status: AUTH_STATUS.ERROR,\r\n        error: action.payload,\r\n        isLoading: false\r\n      };\r\n\r\n    case AUTH_ACTIONS.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        status: state.isAuthenticated ? AUTH_STATUS.AUTHENTICATED : AUTH_STATUS.UNAUTHENTICATED\r\n      };\r\n\r\n    case AUTH_ACTIONS.UPDATE_TELEGRAM_SYNC:\r\n      return {\r\n        ...state,\r\n        telegramSync: {\r\n          ...state.telegramSync,\r\n          ...action.payload\r\n        }\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGOUT:\r\n      return {\r\n        ...initialState,\r\n        isLoading: false,\r\n        status: AUTH_STATUS.UNAUTHENTICATED\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Criação do contexto\r\nconst AuthContext = createContext({});\r\n\r\n// Hook para usar o contexto\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\n// Provider do contexto\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // Função para fazer login\r\n  const login = async (credentials, rememberMe = false) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\r\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n\r\n      const result = await authService.login(credentials, rememberMe);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_AUTHENTICATED,\r\n        payload: { user: result.user }\r\n      });\r\n\r\n      // Atualiza status de sincronização do Telegram\r\n      updateTelegramSyncStatus();\r\n\r\n      return result;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Erro ao fazer login'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Função para fazer cadastro\r\n  const register = async (userData) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\r\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n\r\n      const result = await authService.register(userData);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_AUTHENTICATED,\r\n        payload: { user: result.user }\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Erro ao fazer cadastro'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Função para fazer logout\r\n  const logout = async (silent = false) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\r\n      \r\n      await authService.logout(silent);\r\n      \r\n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n    } catch (error) {\r\n      console.error('Erro ao fazer logout:', error);\r\n      // Mesmo com erro, limpa o estado local\r\n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n    }\r\n  };\r\n\r\n  // Função para atualizar perfil\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n\r\n      const result = await authService.updateProfile(profileData);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_USER,\r\n        payload: result.user\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Erro ao atualizar perfil'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Função para alterar senha\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n\r\n      const result = await authService.changePassword(currentPassword, newPassword);\r\n      return result;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Erro ao alterar senha'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Função para sincronizar com Telegram\r\n  const syncWithTelegram = async (telegramCode) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n\r\n      const result = await authService.syncWithTelegram(telegramCode);\r\n      \r\n      // Atualiza dados do usuário\r\n      if (result.user) {\r\n        dispatch({\r\n          type: AUTH_ACTIONS.SET_USER,\r\n          payload: result.user\r\n        });\r\n      }\r\n\r\n      // Atualiza status de sincronização\r\n      updateTelegramSyncStatus();\r\n\r\n      return result;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Erro ao sincronizar com Telegram'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Função para remover sincronização do Telegram\r\n  const unsyncTelegram = async () => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n\r\n      const result = await authService.unsyncTelegram();\r\n      \r\n      // Atualiza dados do usuário\r\n      if (result.user) {\r\n        dispatch({\r\n          type: AUTH_ACTIONS.SET_USER,\r\n          payload: result.user\r\n        });\r\n      }\r\n\r\n      // Limpa status de sincronização\r\n      dispatch({\r\n        type: AUTH_ACTIONS.UPDATE_TELEGRAM_SYNC,\r\n        payload: initialState.telegramSync\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Erro ao remover sincronização'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Função para gerar código de sincronização\r\n  const generateTelegramSyncCode = async () => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n      \r\n      const result = await authService.generateTelegramSyncCode();\r\n      return result;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Erro ao gerar código'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Função para atualizar status de sincronização do Telegram\r\n  const updateTelegramSyncStatus = () => {\r\n    const syncStatus = authService.getTelegramSyncStatus();\r\n    dispatch({\r\n      type: AUTH_ACTIONS.UPDATE_TELEGRAM_SYNC,\r\n      payload: syncStatus\r\n    });\r\n  };\r\n\r\n  // Função para excluir conta\r\n  const deleteAccount = async (password) => {\r\n    try {\r\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\r\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n\r\n      const result = await authService.deleteAccount(password);\r\n      \r\n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Erro ao excluir conta'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Função para limpar erros\r\n  const clearError = () => {\r\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n  };\r\n\r\n  // Função para recarregar dados do usuário\r\n  const reloadUser = async () => {\r\n    try {\r\n      const isValid = await authService.validateToken();\r\n      \r\n      if (isValid) {\r\n        const user = authService.getCurrentUser();\r\n        dispatch({\r\n          type: AUTH_ACTIONS.SET_USER,\r\n          payload: user\r\n        });\r\n        updateTelegramSyncStatus();\r\n      } else {\r\n        dispatch({ type: AUTH_ACTIONS.SET_UNAUTHENTICATED });\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao recarregar usuário:', error);\r\n      dispatch({ type: AUTH_ACTIONS.SET_UNAUTHENTICATED });\r\n    }\r\n  };\r\n\r\n  // Efeito para inicializar a autenticação\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      try {\r\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\r\n\r\n        // Inicializa o serviço de autenticação\r\n        await authService.initialize();\r\n      } catch (error) {\r\n        console.error('Erro ao inicializar autenticação:', error);\r\n        dispatch({ type: AUTH_ACTIONS.SET_UNAUTHENTICATED });\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Listeners para eventos de autenticação\r\n  useEffect(() => {\r\n    const handleAuthInitialized = (event) => {\r\n      const { user, isAuthenticated } = event.detail;\r\n      \r\n      if (isAuthenticated && user) {\r\n        dispatch({\r\n          type: AUTH_ACTIONS.SET_AUTHENTICATED,\r\n          payload: { user }\r\n        });\r\n        updateTelegramSyncStatus();\r\n      } else {\r\n        dispatch({ type: AUTH_ACTIONS.SET_UNAUTHENTICATED });\r\n      }\r\n    };\r\n\r\n    const handleAuthLogin = (event) => {\r\n      const { user } = event.detail;\r\n      dispatch({\r\n        type: AUTH_ACTIONS.SET_AUTHENTICATED,\r\n        payload: { user }\r\n      });\r\n      updateTelegramSyncStatus();\r\n    };\r\n\r\n    const handleAuthLogout = () => {\r\n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n    };\r\n\r\n    const handleAccountDeleted = () => {\r\n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n    };\r\n\r\n    // Adiciona listeners\r\n    window.addEventListener('auth:initialized', handleAuthInitialized);\r\n    window.addEventListener('auth:login', handleAuthLogin);\r\n    window.addEventListener('auth:logout', handleAuthLogout);\r\n    window.addEventListener('auth:account-deleted', handleAccountDeleted);\r\n\r\n    // Remove listeners na limpeza\r\n    return () => {\r\n      window.removeEventListener('auth:initialized', handleAuthInitialized);\r\n      window.removeEventListener('auth:login', handleAuthLogin);\r\n      window.removeEventListener('auth:logout', handleAuthLogout);\r\n      window.removeEventListener('auth:account-deleted', handleAccountDeleted);\r\n    };\r\n  }, []);\r\n\r\n  // Valor do contexto\r\n  const contextValue = {\r\n    // Estado\r\n    ...state,\r\n    \r\n    // Funções\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    changePassword,\r\n    syncWithTelegram,\r\n    unsyncTelegram,\r\n    generateTelegramSyncCode,\r\n    deleteAccount,\r\n    clearError,\r\n    reloadUser\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}